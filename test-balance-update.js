// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ faucet
console.log('üß™ Testing balance update functionality...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async function testBalanceUpdate() {
  try {
    // –ñ–¥–µ–º, –ø–æ–∫–∞ Privy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
    if (typeof window.gameCheckBalance === 'undefined') {
      console.log('‚è≥ Waiting for Privy to initialize...');
      setTimeout(testBalanceUpdate, 1000);
      return;
    }

    console.log('‚úÖ Privy initialized, testing balance update...');

    // –ü–æ–ª—É—á–∞–µ–º embedded wallet
    const embeddedWallet = window.gameGetEmbeddedWallet();
    if (!embeddedWallet) {
      console.log('‚ùå No embedded wallet found');
      return;
    }

    console.log('üëõ Embedded wallet found:', embeddedWallet.address);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    console.log('üí∞ Checking current balance...');
    const currentBalance = await window.gameCheckBalance(6342);
    console.log('Current balance:', currentBalance, 'ETH');

    // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∏–∑–∫–∏–π, –≤—ã–∑—ã–≤–∞–µ–º faucet
    if (parseFloat(currentBalance) < 0.00005) {
      console.log('üö∞ Balance is low, calling faucet...');
      try {
        await window.gameCallFaucet(embeddedWallet.address, 6342);
        console.log('‚úÖ Faucet called successfully');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–Ω–æ–≤–∞
        setTimeout(async () => {
          console.log('üîÑ Checking balance after faucet...');
          const newBalance = await window.gameCheckBalance(6342);
          console.log('New balance:', newBalance, 'ETH');
          
          if (parseFloat(newBalance) > parseFloat(currentBalance)) {
            console.log('üéâ Balance updated successfully!');
          } else {
            console.log('‚ö†Ô∏è Balance not updated yet, may need more time');
          }
        }, 3000);
      } catch (error) {
        console.error('‚ùå Faucet failed:', error.message);
      }
    } else {
      console.log('‚úÖ Balance is sufficient');
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testBalanceUpdate();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.testBalanceUpdate = testBalanceUpdate;