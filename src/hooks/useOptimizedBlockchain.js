import { useState, useEffect, useCallback, useRef } from 'react';
import { usePrivy } from '@privy-io/react-auth';
import optimizedBlockchainService from '../services/optimizedBlockchainService';

export const useOptimizedBlockchain = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
  const [isInitialized, setIsInitialized] = useState(false);
  const [currentNetwork, setCurrentNetwork] = useState('local');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  
  // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const [performanceStats, setPerformanceStats] = useState(null);
  const [realtimeStats, setRealtimeStats] = useState({
    lastTransactionTime: null,
    transactionsThisSession: 0,
    averageTimeThisSession: 0
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const [contractState, setContractState] = useState({
    currentNumber: 0,
    isReading: false
  });

  // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Privy
  const { ready, authenticated, user } = usePrivy();
  const sessionStatsRef = useRef({
    startTime: null,
    transactionTimes: []
  });

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  const initializeSystem = useCallback(async (networkKey = 'local', batchSize = 20) => {
    if (!ready || !authenticated || !user?.wallet) {
      console.warn('Privy –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ blockchain —Å–∏—Å—Ç–µ–º—ã');
      return false;
    }

    setIsLoading(true);
    setError(null);

    try {
      console.log(`üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∏–≥—Ä—ã...`);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
      await optimizedBlockchainService.initializeOptimized(
        user.wallet, 
        networkKey, 
        batchSize
      );

      setIsInitialized(true);
      setCurrentNetwork(networkKey);
      
      // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏
      sessionStatsRef.current = {
        startTime: Date.now(),
        transactionTimes: []
      };
      
      setRealtimeStats({
        lastTransactionTime: null,
        transactionsThisSession: 0,
        averageTimeThisSession: 0
      });

      console.log(`‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω!`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      await updateContractState();
      
      return true;
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã:', err);
      setError(err.message);
      return false;
    } finally {
      setIsLoading(false);
    }
  }, [ready, authenticated, user]);

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
   */
  const sendPlayerAction = useCallback(async () => {
    if (!isInitialized) {
      throw new Error('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    try {
      const actionStartTime = performance.now();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
      const executionTime = await optimizedBlockchainService.sendPlayerAction(currentNetwork);
      
      const totalActionTime = performance.now() - actionStartTime;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
      sessionStatsRef.current.transactionTimes.push(executionTime);
      const sessionAverage = sessionStatsRef.current.transactionTimes.reduce((a, b) => a + b, 0) / 
                           sessionStatsRef.current.transactionTimes.length;

      setRealtimeStats(prev => ({
        lastTransactionTime: executionTime,
        transactionsThisSession: prev.transactionsThisSession + 1,
        averageTimeThisSession: sessionAverage
      }));

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
      const stats = optimizedBlockchainService.getPerformanceStats();
      setPerformanceStats(stats);

      console.log(`üéÆ –î–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ ${executionTime.toFixed(2)}ms`);
      
      return {
        success: true,
        executionTime,
        totalActionTime,
        transactionHash: null // –î–æ–±–∞–≤–∏—Ç—Å—è –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö
      };

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞:', err);
      setError(err.message);
      
      return {
        success: false,
        error: err.message,
        executionTime: null
      };
    }
  }, [isInitialized, currentNetwork]);

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ç–∏ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è)
   */
  const switchNetwork = useCallback(async (networkKey, batchSize = 20) => {
    if (networkKey === currentNetwork) {
      console.log(`–£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ç–∏ ${networkKey}`);
      return true;
    }

    setIsLoading(true);
    
    try {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
      optimizedBlockchainService.reset();
      setIsInitialized(false);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Ç–∏
      const success = await initializeSystem(networkKey, batchSize);
      
      if (success) {
        console.log(`üîÑ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ ${networkKey}`);
      }
      
      return success;
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–∏:', err);
      setError(err.message);
      return false;
    } finally {
      setIsLoading(false);
    }
  }, [currentNetwork, initializeSystem]);

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
   */
  const updateContractState = useCallback(async () => {
    if (!isInitialized) return;

    setContractState(prev => ({ ...prev, isReading: true }));
    
    try {
      const currentNumber = await optimizedBlockchainService.getCurrentNumber(currentNetwork);
      
      setContractState({
        currentNumber: currentNumber || 0,
        isReading: false
      });
      
    } catch (err) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', err);
      setContractState(prev => ({ ...prev, isReading: false }));
    }
  }, [isInitialized, currentNetwork]);

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
   */
  useEffect(() => {
    if (!isInitialized) return;

    const interval = setInterval(updateContractState, 5000); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    return () => clearInterval(interval);
  }, [isInitialized, updateContractState]);

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–π
   */
  const getAvailableNetworks = useCallback(() => {
    return [
      { 
        key: 'local', 
        name: 'Local Hardhat', 
        description: '–õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å',
        icon: 'üè†',
        blockTime: '2s'
      },
      { 
        key: 'megaeth', 
        name: 'MegaETH Testnet', 
        description: '–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è —Å–µ—Ç—å 100k TPS',
        icon: '‚ö°',
        blockTime: '100ms'
      },
      { 
        key: 'base', 
        name: 'Base Sepolia', 
        description: 'Base L2 —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å',
        icon: 'üîµ',
        blockTime: '2s'
      }
    ];
  }, []);

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
   */
  const isSystemReady = useCallback(() => {
    return ready && authenticated && user?.wallet && isInitialized;
  }, [ready, authenticated, user, isInitialized]);

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  const getPoolInfo = useCallback(() => {
    if (!performanceStats?.poolStatus) return null;
    
    const poolData = performanceStats.poolStatus[currentNetwork];
    if (!poolData) return null;

    return {
      ...poolData,
      utilizationPercent: Math.round((poolData.used / poolData.total) * 100),
      needsRefill: poolData.remaining < poolData.total * 0.3 // –ú–µ–Ω–µ–µ 30%
    };
  }, [performanceStats, currentNetwork]);

  /**
   * –°–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã
   */
  const resetSystem = useCallback(() => {
    optimizedBlockchainService.reset();
    setIsInitialized(false);
    setError(null);
    setPerformanceStats(null);
    setRealtimeStats({
      lastTransactionTime: null,
      transactionsThisSession: 0,
      averageTimeThisSession: 0
    });
    setContractState({
      currentNumber: 0,
      isReading: false
    });
    
    sessionStatsRef.current = {
      startTime: null,
      transactionTimes: []
    };
    
    console.log('üîÑ –°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (isInitialized) {
        resetSystem();
      }
    };
  }, []);

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    initializeSystem,
    sendPlayerAction,
    switchNetwork,
    updateContractState,
    resetSystem,

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    isInitialized,
    currentNetwork,
    isLoading,
    error,
    isSystemReady: isSystemReady(),

    // –ú–µ—Ç—Ä–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    performanceStats,
    realtimeStats,
    contractState,
    poolInfo: getPoolInfo(),

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    availableNetworks: getAvailableNetworks(),

    // –£—Ç–∏–ª–∏—Ç—ã
    sessionDuration: sessionStatsRef.current.startTime ? 
      Date.now() - sessionStatsRef.current.startTime : 0
  };
};