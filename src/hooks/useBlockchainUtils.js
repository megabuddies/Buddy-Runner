import { useState, useEffect, useRef } from 'react';
import { usePrivy, useWallets } from '@privy-io/react-auth';
import { createWalletClient, http, custom, parseGwei, createPublicClient } from 'viem';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π
const NETWORK_CONFIGS = {
  6342: { // MegaETH Testnet
    name: 'MegaETH Testnet',
    rpcUrl: 'https://carrot.megaeth.com/rpc',
    fallbackRpcUrls: [
      'https://carrot.megaeth.com/rpc',
      // –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ RPC endpoints –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    ],
    wsUrl: 'wss://carrot.megaeth.com/ws',
    contractAddress: '0xb34cac1135c27ec810e7e6880325085783c1a7e0', // Updater contract
    faucetAddress: '0x76b71a17d82232fd29aca475d14ed596c67c4b85',
    chainId: 6342,
    sendMethod: 'realtime_sendRawTransaction', // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è MegaETH
    connectionTimeouts: {
      initial: 10000, // 10 seconds for initial connection
      retry: 3000,    // 3 seconds for retries (–±—ã—Å—Ç—Ä—ã–µ retry –¥–ª—è gaming)
      request: 5000   // 5 seconds for individual requests (–¥–ª—è real-time gaming)
    },
    maxConnections: 3, // Limit concurrent connections
  },
  31337: { // Foundry Local
    name: 'Foundry Local',
    rpcUrl: 'http://127.0.0.1:8545',
    fallbackRpcUrls: ['http://127.0.0.1:8545'],
    contractAddress: '0xb34cac1135c27ec810e7e6880325085783c1a7e0',
    faucetAddress: '0x76b71a17d82232fd29aca475d14ed596c67c4b85',
    chainId: 31337,
    sendMethod: 'eth_sendRawTransaction',
    connectionTimeouts: {
      initial: 10000,
      retry: 5000,
      request: 15000
    },
    maxConnections: 2,
  },
  50311: { // Somnia Testnet
    name: 'Somnia Testnet',
    rpcUrl: 'https://testnet.somnia.network',
    fallbackRpcUrls: ['https://testnet.somnia.network'],
    contractAddress: '0xb34cac1135c27ec810e7e6880325085783c1a7e0',
    faucetAddress: '0x76b71a17d82232fd29aca475d14ed596c67c4b85',
    chainId: 50311,
    sendMethod: 'eth_sendRawTransaction',
    connectionTimeouts: {
      initial: 20000,
      retry: 10000,
      request: 30000
    },
    maxConnections: 2,
  },
  1313161556: { // RISE Testnet
    name: 'RISE Testnet',
    rpcUrl: 'https://testnet-rpc.rise.com',
    fallbackRpcUrls: ['https://testnet-rpc.rise.com'],
    contractAddress: '0xb34cac1135c27ec810e7e6880325085783c1a7e0',
    faucetAddress: '0x76b71a17d82232fd29aca475d14ed596c67c4b85',
    chainId: 1313161556,
    sendMethod: 'eth_sendRawTransactionSync', // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è RISE
    connectionTimeouts: {
      initial: 20000,
      retry: 10000,
      request: 30000
    },
    maxConnections: 2,
  }
};

// ABI –¥–ª—è Updater –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
const UPDATER_ABI = [
  {
    "inputs": [],
    "name": "update",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "number",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  }
];

// Safe JSON parsing utility to handle malformed responses
const safeJsonParse = (data) => {
  try {
    // Handle common malformed responses
    if (typeof data === 'string') {
      // Remove common prefixes that cause JSON parsing issues
      const cleanedData = data
        .replace(/^cadesplugin_loaded/, '')
        .replace(/^EnableInte.*?$/, '')
        .trim();
      
      if (cleanedData.length === 0) {
        return null;
      }
      
      return JSON.parse(cleanedData);
    }
    return data;
  } catch (error) {
    console.warn('Failed to parse JSON response:', error.message, 'Data:', data);
    return null;
  }
};

export const useBlockchainUtils = () => {
  const { authenticated, user, login, logout, isReady } = usePrivy();
  const { wallets } = useWallets();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [isInitializing, setIsInitializing] = useState(false);
  const [transactionPending, setTransactionPending] = useState(false);
  const [balance, setBalance] = useState('0');
  const [contractNumber, setContractNumber] = useState(0);

  // –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  const clientCache = useRef({});
  const gasParams = useRef({});
  
  // –ù–û–í–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ RPC –≤—ã–∑–æ–≤–æ–≤
  const GLOBAL_CACHE_KEY = 'megaBuddies_globalCache';
  const CACHE_EXPIRY = {
    gasParams: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –¥–ª—è –≥–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    chainParams: 30 * 1000,   // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∏
    rpcHealth: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã –¥–ª—è RPC health
    clients: 10 * 60 * 1000,  // 10 –º–∏–Ω—É—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    nonce: 30 * 1000          // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è nonce –∫—ç—à–∞
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞ –≤ localStorage —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π BigInt
  const saveGlobalCache = () => {
    try {
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BigInt
      const serializeBigInt = (obj) => {
        return JSON.parse(JSON.stringify(obj, (key, value) => {
          if (typeof value === 'bigint') {
            return value.toString() + 'n'; // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä 'n' –¥–ª—è BigInt
          }
          return value;
        }));
      };
      
      const cacheData = {
        gasParams: {
          data: serializeBigInt(gasParams.current),
          timestamp: Date.now()
        },
        chainParams: {
          data: chainParamsCache.current,
          timestamp: Date.now()
        },
        rpcHealth: {
          data: rpcHealthStatus.current,
          timestamp: Date.now()
        },
        nonceCache: {
          data: nonceManager.current,
          timestamp: Date.now()
        }
      };
      
      localStorage.setItem(GLOBAL_CACHE_KEY, JSON.stringify(cacheData));
    } catch (error) {
      console.warn('Failed to save global cache:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞ –∏–∑ localStorage —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º BigInt
  const loadGlobalCache = () => {
    try {
      const cached = localStorage.getItem(GLOBAL_CACHE_KEY);
      if (cached) {
        const parsed = JSON.parse(cached);
        const now = Date.now();
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è BigInt
        const deserializeBigInt = (obj) => {
          if (typeof obj === 'string' && obj.endsWith('n')) {
            return BigInt(obj.slice(0, -1));
          }
          if (typeof obj === 'object' && obj !== null) {
            const result = Array.isArray(obj) ? [] : {};
            for (const [key, value] of Object.entries(obj)) {
              result[key] = deserializeBigInt(value);
            }
            return result;
          }
          return obj;
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (parsed.gasParams && (now - parsed.gasParams.timestamp) < CACHE_EXPIRY.gasParams) {
          gasParams.current = deserializeBigInt(parsed.gasParams.data);
          console.log('üéØ Loaded cached gas parameters from storage');
        }
        
        if (parsed.chainParams && (now - parsed.chainParams.timestamp) < CACHE_EXPIRY.chainParams) {
          chainParamsCache.current = parsed.chainParams.data;
          console.log('üéØ Loaded cached chain parameters from storage');
        }
        
        if (parsed.rpcHealth && (now - parsed.rpcHealth.timestamp) < CACHE_EXPIRY.rpcHealth) {
          rpcHealthStatus.current = parsed.rpcHealth.data;
          console.log('üéØ Loaded cached RPC health from storage');
        }
        
        if (parsed.nonceCache && (now - parsed.nonceCache.timestamp) < CACHE_EXPIRY.nonce) {
          // –û—Å—Ç–æ—Ä–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º nonce –∫—ç—à - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ
          Object.entries(parsed.nonceCache.data).forEach(([key, cachedManager]) => {
            if (cachedManager && typeof cachedManager.currentNonce === 'number') {
              nonceManager.current[key] = {
                ...cachedManager,
                isUpdating: false, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                lastUpdate: cachedManager.lastUpdate || 0
              };
            }
          });
          console.log('üéØ Loaded cached nonce data from storage');
        }
      }
    } catch (error) {
      console.warn('Failed to load global cache:', error);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    loadGlobalCache();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const saveInterval = setInterval(saveGlobalCache, 30000);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const handleBeforeUnload = () => saveGlobalCache();
    window.addEventListener('beforeunload', handleBeforeUnload);
    
    // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô —Å–±—Ä–æ—Å circuit breaker –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const resetCircuitBreakerInterval = setInterval(() => {
      Object.keys(circuitBreakers.current).forEach(chainId => {
        const cb = circuitBreakers.current[chainId];
        if (cb && cb.state === 'OPEN') {
          const timeSinceLastFailure = Date.now() - cb.lastFailureTime;
          if (timeSinceLastFailure > cb.timeout) {
            cb.state = 'HALF_OPEN';
            cb.failures = 0;
            console.log(`üîÑ Auto-reset circuit breaker for chain ${chainId} - trying again`);
          }
        }
      });
    }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    
    return () => {
      clearInterval(saveInterval);
      clearInterval(resetCircuitBreakerInterval);
      window.removeEventListener('beforeunload', handleBeforeUnload);
      saveGlobalCache(); // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    };
  }, []);

  // –ù–û–í–ê–Ø —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
  const connectionPool = useRef({});
  const rpcHealthStatus = useRef({});
  const activeConnections = useRef({});
  
  // –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–£–õ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô —Å –±–æ–ª—å—à–∏–º —Ä–∞–∑–º–µ—Ä–æ–º –∏ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º nonce
  const preSignedPool = useRef({});
  const nonceManager = useRef({}); // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ nonce
  const isInitialized = useRef({});
  const transactionPendingCount = useRef(0); // –°—á–µ—Ç—á–∏–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  
  // –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ Performance Monitoring –¥–ª—è Real-Time Gaming
  const performanceMetrics = useRef({});
  
  const initPerformanceMonitoring = (chainId) => {
    if (!performanceMetrics.current[chainId]) {
      performanceMetrics.current[chainId] = {
        recentTransactions: [],
        averageBlockchainTime: 0,
        successRate: 0,
        totalTransactions: 0,
        successfulTransactions: 0,
        lastUpdate: Date.now()
      };
    }
    return performanceMetrics.current[chainId];
  };

  const recordPerformanceMetric = (chainId, blockchainTime, success) => {
    const metrics = initPerformanceMonitoring(chainId);
    
    metrics.recentTransactions.push({
      blockchainTime,
      success,
      timestamp: Date.now()
    });
    
    // –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    if (metrics.recentTransactions.length > 50) {
      metrics.recentTransactions.shift();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    metrics.totalTransactions++;
    if (success) {
      metrics.successfulTransactions++;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const recentSuccessful = metrics.recentTransactions.filter(tx => tx.success);
    if (recentSuccessful.length > 0) {
      metrics.averageBlockchainTime = recentSuccessful.reduce((sum, tx) => sum + tx.blockchainTime, 0) / recentSuccessful.length;
    }
    
    metrics.successRate = (metrics.successfulTransactions / metrics.totalTransactions) * 100;
    metrics.lastUpdate = Date.now();
    
    return metrics;
  };

  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∏ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ RPC –≤—ã–∑–æ–≤–æ–≤
  const chainParamsCache = useRef({});

  // –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
  const ENHANCED_POOL_CONFIG = {
    6342: { // MegaETH - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨
      poolSize: 30, // –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ Crossy Fluffle
      refillAt: 0.3, // –û—á–µ–Ω—å —Ä–∞–Ω–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–µ–≤
      batchSize: 12, // –ë–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏  
      maxRetries: 3,
      retryDelay: 200, // –ë—ã—Å—Ç—Ä—ã–µ retry –¥–ª—è MegaETH
      burstMode: true, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ burst —Ä–µ–∂–∏–º–∞
      maxBurstSize: 5, // –ú–∞–∫—Å–∏–º—É–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ burst —Ä–µ–∂–∏–º–µ
      burstCooldown: 500 // –ö–æ—Ä–æ—Ç–∫–∏–π cooldown –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    },
    31337: { // Foundry
      poolSize: 20,
      refillAt: 0.4,
      batchSize: 10,
      maxRetries: 3,
      retryDelay: 150,
      burstMode: true,
      maxBurstSize: 4,
      burstCooldown: 300
    },
    50311: { // Somnia
      poolSize: 15,
      refillAt: 0.5,
      batchSize: 8,
      maxRetries: 3,
      retryDelay: 300,
      burstMode: true,
      maxBurstSize: 3,
      burstCooldown: 800
    },
    1313161556: { // RISE
      poolSize: 12,
      refillAt: 0.6,
      batchSize: 6,
      maxRetries: 2,
      retryDelay: 400,
      burstMode: false,
      maxBurstSize: 2,
      burstCooldown: 1500
    },
    default: {
      poolSize: 15,
      refillAt: 0.5,
      batchSize: 8,
      maxRetries: 3,
      retryDelay: 300,
      burstMode: false,
      maxBurstSize: 2,
      burstCooldown: 1000
    }
  };

  // Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è MegaETH
  const MEGAETH_FALLBACK_CONFIG = {
    // –£–º–µ–Ω—å—à–∞–µ–º batch size –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å RPC
    reducedBatchSize: 1,
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
    increasedDelay: 1000,
    // –†–µ–∂–∏–º graceful degradation
    degradedMode: false
  };

  const fallbackState = useRef({
    6342: { ...MEGAETH_FALLBACK_CONFIG } // MegaETH
  });

  // –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è burst —Ä–µ–∂–∏–º–æ–º –∏ rate limiting
  const burstState = useRef({});
  
  const getBurstManager = (chainId) => {
    if (!burstState.current[chainId]) {
      const config = ENHANCED_POOL_CONFIG[chainId] || ENHANCED_POOL_CONFIG.default;
      burstState.current[chainId] = {
        lastBurstTime: 0,
        burstCount: 0,
        inCooldown: false,
        pendingTransactions: [],
        processingBurst: false
      };
    }
    return burstState.current[chainId];
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ burst —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const canExecuteBurst = (chainId) => {
    const config = ENHANCED_POOL_CONFIG[chainId] || ENHANCED_POOL_CONFIG.default;
    if (!config.burstMode) return false;

    const burstManager = getBurstManager(chainId);
    const now = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –ø–µ—Ä–∏–æ–¥
    if (burstManager.inCooldown && (now - burstManager.lastBurstTime) < config.burstCooldown) {
      return false;
    }

    // –ï—Å–ª–∏ cooldown –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (burstManager.inCooldown && (now - burstManager.lastBurstTime) >= config.burstCooldown) {
      burstManager.inCooldown = false;
      burstManager.burstCount = 0;
    }

    return burstManager.burstCount < config.maxBurstSize;
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è burst –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  const updateBurstState = (chainId, success) => {
    const config = ENHANCED_POOL_CONFIG[chainId] || ENHANCED_POOL_CONFIG.default;
    if (!config.burstMode) return;

    const burstManager = getBurstManager(chainId);
    const now = Date.now();

    if (success) {
      burstManager.burstCount++;
      burstManager.lastBurstTime = now;

      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ burst, –≤–∫–ª—é—á–∞–µ–º cooldown
      if (burstManager.burstCount >= config.maxBurstSize) {
        burstManager.inCooldown = true;
        console.log(`Burst mode cooldown activated for chain ${chainId} (${config.burstCooldown}ms)`);
      }
    }
  };

  // –£–º–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è burst —Ä–µ–∂–∏–º–∞
  const queueBurstTransaction = async (chainId, transactionFn) => {
    const burstManager = getBurstManager(chainId);
    
    return new Promise((resolve, reject) => {
      burstManager.pendingTransactions.push({
        fn: transactionFn,
        resolve,
        reject,
        timestamp: Date.now()
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
      if (!burstManager.processingBurst) {
        processBurstQueue(chainId);
      }
    });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ burst —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const processBurstQueue = async (chainId) => {
    const burstManager = getBurstManager(chainId);
    burstManager.processingBurst = true;

    while (burstManager.pendingTransactions.length > 0) {
      const canBurst = canExecuteBurst(chainId);
      
      if (!canBurst) {
        // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è cooldown
        const config = ENHANCED_POOL_CONFIG[chainId] || ENHANCED_POOL_CONFIG.default;
        const waitTime = Math.max(100, config.burstCooldown / 10);
        await new Promise(resolve => setTimeout(resolve, waitTime));
        continue;
      }

      const transaction = burstManager.pendingTransactions.shift();
      if (!transaction) break;

      try {
        const result = await transaction.fn();
        updateBurstState(chainId, true);
        transaction.resolve(result);
      } catch (error) {
        updateBurstState(chainId, false);
        transaction.reject(error);
      }
    }

    burstManager.processingBurst = false;
  };

  // –ù–û–í–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è RPC endpoints
  const initializeRpcHealth = (chainId) => {
    const config = NETWORK_CONFIGS[chainId];
    if (!config) return;

    if (!rpcHealthStatus.current[chainId]) {
      rpcHealthStatus.current[chainId] = {
        endpoints: config.fallbackRpcUrls.map(url => ({
          url,
          healthy: true,
          lastChecked: 0,
          consecutiveFailures: 0,
          responseTime: 0
        })),
        currentEndpointIndex: 0,
        lastHealthCheck: 0
      };
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤–æ–≥–æ RPC endpoint
  const getHealthyRpcEndpoint = async (chainId) => {
    const health = rpcHealthStatus.current[chainId];
    if (!health) {
      initializeRpcHealth(chainId);
      return NETWORK_CONFIGS[chainId].rpcUrl;
    }

    // –ò—â–µ–º –∑–¥–æ—Ä–æ–≤—ã–π endpoint
    for (let i = 0; i < health.endpoints.length; i++) {
      const endpoint = health.endpoints[health.currentEndpointIndex];
      
      if (endpoint.healthy || endpoint.consecutiveFailures < 3) {
        return endpoint.url;
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É endpoint
      health.currentEndpointIndex = (health.currentEndpointIndex + 1) % health.endpoints.length;
    }

    // –ï—Å–ª–∏ –≤—Å–µ endpoints –Ω–µ–∑–¥–æ—Ä–æ–≤—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è)
    console.warn(`All RPC endpoints for chain ${chainId} appear unhealthy, using primary`);
    return health.endpoints[0].url;
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è endpoint
  const updateRpcHealth = (chainId, rpcUrl, success, responseTime = 0) => {
    const health = rpcHealthStatus.current[chainId];
    if (!health) return;

    const endpoint = health.endpoints.find(ep => ep.url === rpcUrl);
    if (!endpoint) return;

    endpoint.lastChecked = Date.now();
    endpoint.responseTime = responseTime;

    if (success) {
      endpoint.healthy = true;
      endpoint.consecutiveFailures = 0;
    } else {
      endpoint.consecutiveFailures++;
      if (endpoint.consecutiveFailures >= 3) {
        endpoint.healthy = false;
        console.warn(`Marking RPC endpoint as unhealthy: ${rpcUrl} (${endpoint.consecutiveFailures} failures)`);
      }
    }
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  const getConnectionFromPool = (chainId, rpcUrl) => {
    const poolKey = `${chainId}-${rpcUrl}`;
    const config = NETWORK_CONFIGS[chainId];
    
    if (!activeConnections.current[poolKey]) {
      activeConnections.current[poolKey] = 0;
    }

    if (activeConnections.current[poolKey] >= config.maxConnections) {
      throw new Error(`Maximum connections (${config.maxConnections}) reached for ${poolKey}`);
    }

    activeConnections.current[poolKey]++;
    
    return () => {
      // Cleanup function
      if (activeConnections.current[poolKey] > 0) {
        activeConnections.current[poolKey]--;
      }
    };
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ fallback —Ä–µ–∂–∏–º–æ–º
  const enableFallbackMode = (chainId) => {
    const state = fallbackState.current[chainId];
    if (state) {
      state.degradedMode = true;
      console.log(`Enabled fallback mode for chain ${chainId}`);
    }
  };

  const getFallbackConfig = (chainId) => {
    const state = fallbackState.current[chainId];
    return state?.degradedMode ? state : null;
  };

  // –£–õ–£–ß–®–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ embedded wallet —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  const getEmbeddedWallet = () => {
    if (!authenticated || !wallets.length) {
      console.log('Not authenticated or no wallets available');
      return null;
    }
    
    console.log('Available wallets:', wallets.map(w => ({ 
      address: w.address, 
      walletClientType: w.walletClientType, 
      connectorType: w.connectorType 
    })));
    
    // Look for embedded wallet - Privy creates embedded wallets with specific types
    const embeddedWallet = wallets.find(wallet => 
      wallet.walletClientType === 'privy' || 
      wallet.connectorType === 'embedded' ||
      wallet.connectorType === 'privy'
    );
    
    if (embeddedWallet) {
      console.log('Found embedded wallet:', embeddedWallet.address);
      return embeddedWallet;
    }
    
    // If no embedded wallet found, use the first available wallet
    if (wallets.length > 0) {
      console.log('No embedded wallet found, using first available wallet:', wallets[0].address);
      return wallets[0];
    }
    
    console.log('No wallets available');
    return null;
  };

  // –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û –£–õ–£–ß–®–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Å–∏—Å—Ç–µ–º–æ–π fallback endpoints
  const createClients = async (chainId) => {
    const cacheKey = `${chainId}`;
    if (clientCache.current[cacheKey]) {
      return clientCache.current[cacheKey];
    }

    const config = NETWORK_CONFIGS[chainId];
    if (!config) throw new Error(`Unsupported network: ${chainId}`);

    const embeddedWallet = getEmbeddedWallet();
    if (!embeddedWallet) throw new Error('No embedded wallet found');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ RPC –∑–¥–æ—Ä–æ–≤—å—è
    initializeRpcHealth(chainId);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–¥–æ—Ä–æ–≤—ã–π RPC endpoint
      const healthyRpcUrl = await getHealthyRpcEndpoint(chainId);
      console.log(`Using RPC endpoint for chain ${chainId}: ${healthyRpcUrl}`);

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
      const releaseConnection = getConnectionFromPool(chainId, healthyRpcUrl);

      // –°–æ–∑–¥–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
      const publicClient = createPublicClient({
        chain: {
          id: chainId,
          name: config.name,
          network: config.name.toLowerCase().replace(/\s+/g, '-'),
          nativeCurrency: {
            name: 'Ether',
            symbol: 'ETH',
            decimals: 18
          },
          rpcUrls: {
            default: { http: [healthyRpcUrl] },
            public: { http: [healthyRpcUrl] }
          }
        },
        transport: http(healthyRpcUrl, {
          timeout: config.connectionTimeouts.initial,
          retryCount: 4, // –£–≤–µ–ª–∏—á–µ–Ω retry count
          retryDelay: ({ count }) => Math.min(1000 * Math.pow(2, count), 8000) // Exponential backoff
        })
      });

      // –î–ª—è MegaETH –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ RPC)
      let walletClient;
      if (chainId === 6342) {
        // MegaETH: –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å Privy account
        walletClient = createWalletClient({
          account: embeddedWallet.address,
          chain: publicClient.chain,
          transport: custom({
            async request({ method, params }) {
              if (method === 'eth_signTransaction') {
                // –õ–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ embedded wallet
                const embeddedWallet = getEmbeddedWallet();
                if (!embeddedWallet) {
                  throw new Error('No embedded wallet found for signing');
                }
                
                // –°–æ–∑–¥–∞–µ–º walletClient —Å embedded wallet
                const provider = await embeddedWallet.getProvider?.() || 
                                await embeddedWallet.getEthereumProvider?.() ||
                                embeddedWallet;
                
                if (provider?.request) {
                  return await provider.request({ method, params });
                }
                
                throw new Error('Unable to get provider for signing');
              }
              // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–¥—É—Ç —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π RPC
              return await publicClient.request({ method, params });
            }
          })
        });
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        walletClient = createWalletClient({
          account: embeddedWallet.address,
          chain: publicClient.chain,
          transport: http(healthyRpcUrl, {
            timeout: config.connectionTimeouts.retry,
            retryCount: 4,
            retryDelay: ({ count }) => Math.min(1000 * Math.pow(2, count), 5000)
          })
        });
      }

      const clients = { 
        publicClient, 
        walletClient, 
        config,
        rpcUrl: healthyRpcUrl,
        releaseConnection // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      };
      clientCache.current[cacheKey] = clients;

      console.log(`Created clients for chain ${chainId}:`, {
        publicRPC: healthyRpcUrl,
        signingMethod: chainId === 6342 ? 'Local Privy' : 'RPC'
      });

      return clients;
    } catch (error) {
      console.error(`Error creating clients for chain ${chainId}:`, error);
      throw error;
    }
  };

  // –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ nonce
  const getNonceManager = (chainId, address) => {
    const key = `${chainId}-${address}`;
    if (!nonceManager.current[key]) {
      nonceManager.current[key] = {
        currentNonce: null,
        pendingNonce: null,
        lastUpdate: 0,
        isUpdating: false
      };
    }
    return nonceManager.current[key];
  };

  // –£–õ–£–ß–®–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ nonce
  const getNextNonce = async (chainId, address, forceRefresh = false) => {
    const manager = getNonceManager(chainId, address);
    const now = Date.now();
    
    // –í–ê–ñ–ù–û: –î–ª—è –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º nonce –∏–∑ —Å–µ—Ç–∏
    // –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–∏ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    const chainKey = chainId.toString();
    const pool = preSignedPool.current[chainKey];
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –±–∞–∑–æ–≤—ã–π nonce
    if (pool && pool.isReady && !forceRefresh) {
      const poolNonce = pool.baseNonce + pool.currentIndex;
      console.log(`üéØ Using pool-based nonce ${poolNonce} for ${address} on chain ${chainId} (pool: ${pool.currentIndex}/${pool.transactions.length})`);
      return poolNonce;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º nonce –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (!manager.currentNonce || forceRefresh || (now - manager.lastUpdate) > 30000) {
      if (manager.isUpdating) {
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        let waitTime = 0;
        while (manager.isUpdating && waitTime < 5000) {
          await new Promise(resolve => setTimeout(resolve, 100));
          waitTime += 100;
        }
        
        // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        if (manager.isUpdating) {
          console.warn('‚ö†Ô∏è Nonce update timeout, forcing reset');
          manager.isUpdating = false;
        }
      }
      
      if (!manager.isUpdating) {
        manager.isUpdating = true;
        try {
          const { publicClient } = await createClients(chainId);
          
          // –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π, –∏ pending nonces –¥–ª—è –ª—É—á—à–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          const [latestNonce, pendingNonce] = await Promise.all([
            publicClient.getTransactionCount({ address: address, blockTag: 'latest' }),
            publicClient.getTransactionCount({ address: address, blockTag: 'pending' })
          ]);
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤—Å–µ–º–∏ nonces
          const networkNonce = Math.max(latestNonce, pendingNonce);
          const previousNonce = manager.currentNonce || 0;
          
          // –ü—Ä–∏ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ç–µ–≤–æ–π nonce
          if (forceRefresh) {
            manager.currentNonce = networkNonce;
            manager.pendingNonce = networkNonce;
            console.log(`üîÑ Force refresh: nonce updated for ${address} on chain ${chainId}: ${previousNonce} ‚Üí ${networkNonce}`);
          } else if (networkNonce > previousNonce) {
            manager.currentNonce = networkNonce;
            manager.pendingNonce = networkNonce;
            console.log(`üîÑ Nonce updated for ${address} on chain ${chainId}: ${previousNonce} ‚Üí ${networkNonce}`);
          } else {
            // –ï—Å–ª–∏ —Å–µ—Ç–µ–≤–æ–π nonce –º–µ–Ω—å—à–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π (–≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
            manager.pendingNonce = manager.currentNonce;
            console.log(`üîÑ Keeping local nonce for ${address} on chain ${chainId}: ${manager.currentNonce} (network: ${networkNonce})`);
          }
          
          manager.lastUpdate = now;
          
        } catch (error) {
          console.error('‚ùå Error updating nonce:', error);
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å nonce –∏–∑ —Å–µ—Ç–∏
          if (manager.currentNonce !== null) {
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º nonce, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            console.warn(`‚ö†Ô∏è Using cached nonce ${manager.currentNonce} due to network error`);
            manager.pendingNonce = manager.currentNonce;
          } else {
            // –ï—Å–ª–∏ nonce –≤–æ–æ–±—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
            manager.currentNonce = 0;
            manager.pendingNonce = 0;
            console.warn(`‚ö†Ô∏è Initializing nonce to 0 due to network error`);
          }
        } finally {
          manager.isUpdating = false;
        }
      }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π nonce (—Ç–æ–ª—å–∫–æ –¥–ª—è real-time —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
    const nextNonce = manager.pendingNonce;
    manager.pendingNonce += 1;
    
    console.log(`üéØ Allocated nonce ${nextNonce} for ${address} on chain ${chainId}`);
    return nextNonce;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const getGasParams = async (chainId) => {
    const cacheKey = chainId.toString();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
    if (gasParams.current[cacheKey]) {
      const cached = gasParams.current[cacheKey];
      const age = Date.now() - (cached.timestamp || 0);
      
      // –î–ª—è MegaETH –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (2 –º–∏–Ω—É—Ç—ã)
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ç–µ–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (5 –º–∏–Ω—É—Ç)
      const maxAge = chainId === 6342 ? 2 * 60 * 1000 : CACHE_EXPIRY.gasParams;
      
      if (age < maxAge) {
        console.log(`üéØ Using cached gas params for chain ${chainId} (age: ${Math.round(age/1000)}s)`);
        return cached;
      }
    }

    try {
      const { publicClient } = await createClients(chainId);
      
      let maxFeePerGas, maxPriorityFeePerGas;
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π
      if (chainId === 6342) {
        // MegaETH Testnet - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è real-time
        console.log('‚ö° Using ultra-optimized gas parameters for MegaETH real-time gaming');
        maxFeePerGas = parseGwei('0.001'); // –°–Ω–∏–∂–µ–Ω–æ –¥–æ 1 mwei –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        maxPriorityFeePerGas = parseGwei('0.0005'); // 0.5 mwei priority
        
      } else if (chainId === 31337) {
        // Foundry Local - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        maxFeePerGas = parseGwei('0.01');
        maxPriorityFeePerGas = parseGwei('0.001');
        
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        try {
          const gasPrice = await publicClient.getGasPrice();
          maxFeePerGas = gasPrice * 2n; // 2x –¥–ª—è –∑–∞–ø–∞—Å–∞
          maxPriorityFeePerGas = parseGwei('1'); // 1 gwei priority
        } catch (error) {
          console.warn('Failed to get dynamic gas price, using fallback:', error);
          // Fallback –∑–Ω–∞—á–µ–Ω–∏—è
          maxFeePerGas = parseGwei('20');
          maxPriorityFeePerGas = parseGwei('2');
        }
      }

      const params = { 
        maxFeePerGas, 
        maxPriorityFeePerGas,
        timestamp: Date.now()
      };
      
      gasParams.current[cacheKey] = params;
      
      console.log(`‚ö° Gas params for chain ${chainId}: {maxFeePerGas: ${Number(maxFeePerGas) / 1e9} gwei, maxPriorityFeePerGas: ${Number(maxPriorityFeePerGas) / 1e9} gwei}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      setTimeout(saveGlobalCache, 100);
      
      return params;
    } catch (error) {
      console.error('Error getting gas params:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏
      if (gasParams.current[cacheKey]) {
        console.log('üîÑ Using stale cached gas params due to error');
        return gasParams.current[cacheKey];
      }
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
      const fallbackParams = {
        maxFeePerGas: parseGwei('20'),
        maxPriorityFeePerGas: parseGwei('2'),
        timestamp: Date.now()
      };
      
      gasParams.current[cacheKey] = fallbackParams;
      return fallbackParams;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const getCachedChainParams = async (chainId) => {
    const cacheKey = chainId.toString();
    
    if (chainParamsCache.current[cacheKey]) {
      return chainParamsCache.current[cacheKey];
    }

    try {
      const { publicClient } = await createClients(chainId);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è
              const [chainIdHex, blockNumber] = await Promise.all([
        retryWithBackoff(() => publicClient.getChainId(), 2, 500, chainId),
        retryWithBackoff(() => publicClient.getBlockNumber(), 2, 500, chainId)
      ]);

      const params = {
        chainId: chainIdHex,
        blockNumber: Number(blockNumber)
      };

      // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è MegaETH, –¥–æ–ª—å—à–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ç–µ–π
      const cacheTime = chainId === 6342 ? 30000 : 60000;
      chainParamsCache.current[cacheKey] = params;
      
      setTimeout(() => {
        delete chainParamsCache.current[cacheKey];
      }, cacheTime);

      console.log(`Cached chain params for ${chainId}:`, params);
      return params;
    } catch (error) {
      console.error('Error getting chain params:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      return {
        chainId: chainId,
        blockNumber: 0
      };
    }
  };

  // –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û –£–õ–£–ß–®–ï–ù–ù–û–ï –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const preSignBatch = async (chainId, startNonce, count) => {
    const chainKey = chainId.toString();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
    const poolConfig = ENHANCED_POOL_CONFIG[chainId] || ENHANCED_POOL_CONFIG.default;
    const fallbackConfig = getFallbackConfig(chainId);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let actualCount = Math.min(count, poolConfig.poolSize);
    if (fallbackConfig) {
      actualCount = Math.min(actualCount, fallbackConfig.reducedBatchSize);
      console.log(`Using fallback mode for chain ${chainId}: batch size ${actualCount}`);
    }
    
    console.log(`Pre-signing ${actualCount} transactions for chain ${chainId} starting from nonce ${startNonce}`);
    
    if (!preSignedPool.current[chainKey]) {
      preSignedPool.current[chainKey] = {
        transactions: [],
        currentIndex: 0,
        baseNonce: startNonce,
        hasTriggeredRefill: false,
        isRefilling: false,
        isReady: false // –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      };
    }

    const pool = preSignedPool.current[chainKey];
    const { walletClient } = await createClients(chainId);
    const gasParams = await getGasParams(chainId);

    console.log(`Using gas parameters: {maxFeePerGasGwei: ${Number(gasParams.maxFeePerGas) / 10**9}, maxPriorityFeePerGasGwei: ${Number(gasParams.maxPriorityFeePerGas) / 10**9}}`);

    const config = NETWORK_CONFIGS[chainId];
    const embeddedWallet = getEmbeddedWallet();
    
    let consecutiveErrors = 0;
    const maxConsecutiveErrors = 3;

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–π –∏ –¥–µ–ª–∞–µ–º –∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ä–∞–∑—É
    for (let i = 0; i < actualCount; i++) {
      try {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è–º–∏
        const delay = fallbackConfig ? fallbackConfig.increasedDelay : poolConfig.retryDelay;
        if (delay > 0 && i > 0) {
          await new Promise(resolve => setTimeout(resolve, delay));
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π nonce –¥–ª—è –ø—Ä–µ-–ø–æ–¥–ø–∏—Å–∞–Ω–∏—è
        const nonce = startNonce + i;
        
        const txData = {
          account: embeddedWallet.address,
          to: config.contractAddress,
          data: '0xa2e62045',
          nonce,
          maxFeePerGas: gasParams.maxFeePerGas,
          maxPriorityFeePerGas: gasParams.maxPriorityFeePerGas,
          value: 0n,
          type: 'eip1559',
          gas: 100000n,
        };

        let signedTx;
        
        // –†–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π
        if (chainId === 6342) {
          // MegaETH: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Privy
          console.log(`Signing transaction ${i + 1} locally for MegaETH`);
          signedTx = await retryWithBackoff(
            async () => {
              // –ü—Ä—è–º–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ embedded wallet
              return await walletClient.signTransaction(txData);
            },
            fallbackConfig ? 1 : poolConfig.maxRetries,
            poolConfig.retryDelay,
            chainId
          );
        } else {
          // –î—Ä—É–≥–∏–µ —Å–µ—Ç–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º walletClient
          console.log(`Signing transaction ${i + 1} via RPC for chain ${chainId}`);
          signedTx = await retryWithBackoff(
            () => walletClient.signTransaction(txData),
            fallbackConfig ? 1 : poolConfig.maxRetries,
            poolConfig.retryDelay,
            chainId
          );
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º nonce –∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        const txWrapper = {
          signedTx,
          _reservedNonce: nonce,
          timestamp: Date.now()
        };
        pool.transactions.push(txWrapper);
        
        // –ö–†–ò–¢–ò–ß–ù–û: –î–µ–ª–∞–µ–º –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å—Ä–∞–∑—É –∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (i === 0) {
          pool.isReady = true;
          console.log(`üéÆ First transaction ready - gaming can begin!`);
          console.log(`‚úÖ Pre-signed transaction pool is now ACTIVE with ${pool.transactions.length} transactions`);
        }
        
        consecutiveErrors = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        console.log(`Signed transaction ${pool.transactions.length}/${actualCount}`);
      } catch (error) {
        console.error(`Error signing transaction ${i + 1}:`, error);
        consecutiveErrors++;
        
        // –î–ª—è rate limiting –æ—à–∏–±–æ–∫, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if (error.message?.includes('rate limit') || error.status === 429 || error.status === 403 || error.message?.includes('not whitelisted')) {
          console.log('Rate limit/403/not whitelisted detected during pre-signing, continuing with next transaction');
          // –ù–ï –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º fallback —Ä–µ–∂–∏–º - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          continue;
        }
        
        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, –ø—Ä–µ—Ä—ã–≤–∞–µ–º batch –Ω–æ –ù–ï –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º fallback
        if (consecutiveErrors >= maxConsecutiveErrors) {
          console.log(`Too many consecutive errors (${consecutiveErrors}), stopping batch signing but keeping realtime mode available`);
          break;
        }
        
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
        continue;
      }
    }

    console.log(`Successfully pre-signed ${pool.transactions.length} transactions`);
    
    // –ï—Å–ª–∏ –º—ã –≤ fallback —Ä–µ–∂–∏–º–µ –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, —ç—Ç–æ —É—Å–ø–µ—Ö
    if (fallbackConfig && pool.transactions.length > 0) {
      console.log('Fallback mode: minimum transactions ready for gaming');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º nonce manager —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ nonces
    const manager = getNonceManager(chainId, embeddedWallet.address);
    if (manager) {
      manager.pendingNonce = Math.max(manager.pendingNonce || 0, startNonce + pool.transactions.length);
    }
  };

  // –£–õ–£–ß–®–ï–ù–ù–û–ï —É–º–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–ª–∞
  const extendPool = async (chainId, startNonce, count) => {
    const chainKey = chainId.toString();
    const pool = preSignedPool.current[chainKey];
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    if (!pool || pool.isRefilling) {
      console.log('Pool extension already in progress, skipping');
      return;
    }
    
    try {
      pool.isRefilling = true;
      console.log(`Extending pool for chain ${chainId} from nonce ${startNonce} with ${count} transactions`);
      
      // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É–ª –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const tempTransactions = [];
      const { walletClient } = await createClients(chainId);
      const gasParams = await getGasParams(chainId);
      const config = NETWORK_CONFIGS[chainId];
      const embeddedWallet = getEmbeddedWallet();
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      for (let i = 0; i < count; i++) {
        try {
          const nonce = startNonce + i;
          
          const txData = {
            account: embeddedWallet.address,
            to: config.contractAddress,
            data: '0xa2e62045',
            nonce,
            maxFeePerGas: gasParams.maxFeePerGas,
            maxPriorityFeePerGas: gasParams.maxPriorityFeePerGas,
            value: 0n,
            type: 'eip1559',
            gas: 100000n,
          };

          let signedTx;
          if (chainId === 6342) {
            signedTx = await walletClient.signTransaction(txData);
          } else {
            signedTx = await walletClient.signTransaction(txData);
          }
          
          const txWrapper = {
            signedTx,
            _reservedNonce: nonce,
            timestamp: Date.now()
          };
          tempTransactions.push(txWrapper);
          
          console.log(`Extended pool: signed ${tempTransactions.length}/${count}`);
        } catch (error) {
          console.error(`Error signing extension transaction ${i + 1}:`, error);
          break;
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É–ª
      if (pool && tempTransactions.length > 0) {
        pool.transactions.push(...tempTransactions);
        pool.hasTriggeredRefill = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        console.log(`Pool extended successfully. Total transactions: ${pool.transactions.length}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º nonce manager
        const manager = getNonceManager(chainId, embeddedWallet.address);
        if (manager) {
          manager.pendingNonce = Math.max(manager.pendingNonce || 0, startNonce + tempTransactions.length);
        }
      }
    } catch (error) {
      console.error('Error extending transaction pool:', error);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º - –∏–≥—Ä–∞ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è –≤ realtime —Ä–µ–∂–∏–º–µ
    } finally {
      if (pool) {
        pool.isRefilling = false;
      }
    }
  };

  // –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û –£–õ–£–ß–®–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –ø—É–ª–∞
  const getNextTransaction = async (chainId) => {
    const chainKey = chainId.toString();
    const pool = preSignedPool.current[chainKey];
    const poolConfig = ENHANCED_POOL_CONFIG[chainId] || ENHANCED_POOL_CONFIG.default;

    // –ï—Å–ª–∏ –ø—É–ª –≥–æ—Ç–æ–≤ –∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (pool && pool.isReady && pool.transactions.length > pool.currentIndex) {
      const txWrapper = pool.transactions[pool.currentIndex];
      pool.currentIndex++;

      console.log(`üéØ Using pre-signed transaction ${pool.currentIndex}/${pool.transactions.length} (nonce: ${txWrapper._reservedNonce})`);

      // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏ - –ø–æ–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
      const usageRatio = pool.currentIndex / pool.transactions.length;
      if (usageRatio >= poolConfig.refillAt && !pool.hasTriggeredRefill && !pool.isRefilling) {
        pool.hasTriggeredRefill = true;
        console.log(`Pool ${Math.round(usageRatio * 100)}% empty, extending with new transactions...`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        setTimeout(async () => {
          try {
            const embeddedWallet = getEmbeddedWallet();
            if (embeddedWallet) {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ nonces –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
              const manager = getNonceManager(chainId, embeddedWallet.address);
              const nextNonce = manager.pendingNonce;
              await extendPool(chainId, nextNonce, poolConfig.batchSize);
            }
          } catch (error) {
            console.error('Error extending pool:', error);
          }
        }, 0);
      }

      return txWrapper.signedTx;
    } else {
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (!pool) {
        console.log(`‚ùå No transaction pool exists for chain ${chainId}`);
      } else if (!pool.isReady) {
        console.log(`‚è≥ Transaction pool not ready yet for chain ${chainId} (${pool.transactions.length} transactions in progress)`);
      } else if (pool.transactions.length <= pool.currentIndex) {
        console.log(`üì≠ Transaction pool empty for chain ${chainId} (used ${pool.currentIndex}/${pool.transactions.length})`);
      }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º realtime
    console.log('No pre-signed transactions available, signing realtime...');
    return await createRealtimeTransaction(chainId);
  };

  // –£–õ–£–ß–®–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const createRealtimeTransaction = async (chainId) => {
    try {
      const { publicClient } = await createClients(chainId);
      const config = NETWORK_CONFIGS[chainId];
      const embeddedWallet = getEmbeddedWallet();
      const gasParams = await getGasParams(chainId);

      if (!embeddedWallet) {
        throw new Error('No embedded wallet available for realtime signing');
      }

      // –£–õ–£–ß–®–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ nonce —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
      const nonce = await getNextNonce(chainId, embeddedWallet.address);

      const txData = {
        account: embeddedWallet.address,
        to: config.contractAddress,
        data: '0xa2e62045',
        nonce,
        maxFeePerGas: gasParams.maxFeePerGas,
        maxPriorityFeePerGas: gasParams.maxPriorityFeePerGas,
        value: 0n,
        type: 'eip1559',
        gas: 100000n,
      };

      console.log(`Creating realtime transaction for chain ${chainId} with nonce ${nonce}`);

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const { walletClient } = await createClients(chainId);
      return await walletClient.signTransaction(txData);
    } catch (error) {
      console.error('Error creating realtime transaction:', error);
      throw error;
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
  const checkBalance = async (chainId) => {
    try {
      const { publicClient } = await createClients(chainId);
      const embeddedWallet = getEmbeddedWallet();
      
      if (!embeddedWallet) {
        console.error('No embedded wallet available for balance check');
        return '0';
      }
      
      const balance = await publicClient.getBalance({
        address: embeddedWallet.address
      });
      
      const balanceEth = (Number(balance) / 10**18).toFixed(4);
      setBalance(balanceEth);
      console.log(`Balance for ${embeddedWallet.address}: ${balanceEth} ETH`);
      return balanceEth;
    } catch (error) {
      console.error('Error checking balance:', error);
      // Return 0 balance and let the system continue
      setBalance('0');
      return '0';
    }
  };

  // –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –≤—ã–∑–æ–≤ faucet —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
  const callFaucet = async (address, chainId) => {
    const cacheKey = `faucet_${chainId}_${address}`;
    const FAUCET_COOLDOWN = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ faucet
      const lastFaucetCall = localStorage.getItem(cacheKey);
      if (lastFaucetCall) {
        const timeSinceLastCall = Date.now() - parseInt(lastFaucetCall);
        if (timeSinceLastCall < FAUCET_COOLDOWN) {
          const remainingTime = Math.ceil((FAUCET_COOLDOWN - timeSinceLastCall) / 1000);
          console.log(`‚è±Ô∏è Faucet cooldown: ${remainingTime}s remaining`);
          throw new Error(`Faucet is on cooldown. Try again in ${remainingTime} seconds.`);
        }
      }
      
      console.log('üí∞ Calling optimized faucet for address:', address);
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30s timeout
      
      const response = await fetch('/api/faucet', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          address, 
          chainId,
          timestamp: Date.now(), // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
          clientVersion: '1.0'    // –í–µ—Ä—Å–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        }),
        signal: controller.signal,
        mode: 'cors'
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        let errorMessage = 'Faucet request failed';
        try {
          const errorData = await response.json();
          errorMessage = errorData.error || errorMessage;
          
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
          if (errorData.code === 'INSUFFICIENT_BALANCE') {
            errorMessage = 'Faucet is temporarily empty. Please try again later.';
          } else if (errorData.code === 'RATE_LIMIT') {
            const retryAfter = errorData.retryAfter || 300;
            errorMessage = `Rate limit exceeded. Try again in ${retryAfter} seconds.`;
          } else if (errorData.code === 'ALREADY_SUFFICIENT') {
            // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            console.log('üí∞ Balance already sufficient, skipping faucet');
            return { 
              success: true, 
              message: 'Sufficient balance already available',
              skipped: true
            };
          }
        } catch (parseError) {
          console.error('Failed to parse faucet error response:', parseError);
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–æ–≤
          if (response.status === 429) {
            errorMessage = 'Too many requests. Please wait a few minutes and try again.';
          } else if (response.status === 503) {
            errorMessage = 'Faucet service is temporarily unavailable. Please try again later.';
          } else {
            errorMessage = `HTTP ${response.status}: ${response.statusText}`;
          }
        }
        throw new Error(errorMessage);
      }

      const result = await response.json();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
      localStorage.setItem(cacheKey, Date.now().toString());
      
      console.log('üí∞ Faucet success:', result);
      
      // –ï—Å–ª–∏ faucet –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç txHash, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      if (result.txHash) {
        console.log('‚è≥ Waiting for faucet transaction to be processed...');
        
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(async () => {
          try {
            await checkBalance(chainId);
            console.log('‚úÖ Balance updated after faucet transaction');
          } catch (error) {
            console.warn('Failed to update balance after faucet:', error);
          }
        }, 3000);
      }
      
      return {
        success: true,
        ...result,
        timestamp: Date.now()
      };
      
    } catch (error) {
      console.error('‚ùå Faucet error:', error);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ timeout –æ—à–∏–±–æ–∫
      if (error.name === 'AbortError') {
        throw new Error('Faucet request timed out. Please check your connection and try again.');
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
        throw new Error('Network error. Please check your connection and try again.');
      }
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
      if (error.message.includes('cooldown') || 
          error.message.includes('Rate limit') || 
          error.message.includes('temporarily unavailable')) {
        throw error;
      }
      
      // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      throw new Error(`Faucet error: ${error.message}`);
    }
  };

  // –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ RPC –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
  const sendRawTransaction = async (chainId, signedTx) => {
    const config = NETWORK_CONFIGS[chainId];
    const poolConfig = ENHANCED_POOL_CONFIG[chainId] || ENHANCED_POOL_CONFIG.default;
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–¥–æ—Ä–æ–≤—ã–π RPC endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const rpcUrl = await getHealthyRpcEndpoint(chainId);
    const startTime = Date.now();
    let success = false;
    
    try {
      let response;
      let txHash;
      
      if (config.sendMethod === 'realtime_sendRawTransaction') {
        // üöÄ MegaETH —Ä–µ–∞–ª—Ç–∞–π–º –º–µ—Ç–æ–¥ - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
        console.log('üöÄ Using MegaETH realtime_sendRawTransaction for instant execution...');
        
        const sendMegaETHTransaction = async () => {
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), config.connectionTimeouts.request);
          
          try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –≤—ã–∑—ã–≤–∞—é—â–∏–µ CORS preflight
            const response = await fetch(rpcUrl, {
              method: 'POST',
              headers: { 
                'Content-Type': 'application/json'
                // –£–±—Ä–∞–ª–∏ –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è CORS
              },
              body: JSON.stringify({
                jsonrpc: '2.0',
                method: 'realtime_sendRawTransaction',
                params: [signedTx],
                id: Date.now()
              }),
              signal: controller.signal,
              mode: 'cors' // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º CORS —Ä–µ–∂–∏–º
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
              const errorText = await response.text();
              throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const jsonResponse = await response.text();
            const parsedResponse = safeJsonParse(jsonResponse);
            
            if (!parsedResponse) {
              throw new Error('Invalid response format from MegaETH RPC');
            }

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ MegaETH –æ—Ç–≤–µ—Ç–æ–≤
            if (parsedResponse.error) {
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ MegaETH
              if (parsedResponse.error.message?.includes('nonce too low')) {
                console.log('üîÑ MegaETH nonce too low, triggering refresh');
                throw new Error('nonce too low');
              } else if (parsedResponse.error.message?.includes('rate limit')) {
                console.log('‚è±Ô∏è MegaETH rate limit hit, will retry');
                throw new Error('rate limit exceeded');
              } else if (parsedResponse.error.message?.includes('already known')) {
                console.log('üîÑ Transaction already known by network - likely duplicate, treating as success');
                // –î–ª—è "already known" –æ—à–∏–±–æ–∫, –º—ã —Å—á–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–π
                // –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ
                return {
                  result: {
                    transactionHash: 'duplicate_tx_' + Date.now(),
                    status: '0x1',
                    gasUsed: '0x66f9', 
                    blockNumber: '0x' + Date.now().toString(16),
                    from: parsedResponse.error.data?.from || '0x0',
                    to: parsedResponse.error.data?.to || '0x0'
                  }
                };
              }
              throw new Error(`MegaETH RPC Error: ${parsedResponse.error.message}`);
            }

            return parsedResponse;
          } catch (error) {
            clearTimeout(timeoutId);
            if (error.name === 'AbortError') {
              throw new Error('MegaETH RPC timeout - real-time deadline exceeded');
            }
            throw error;
          }
        };

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è retry –ª–æ–≥–∏–∫–∞ –¥–ª—è MegaETH —Å –±—ã—Å—Ç—Ä—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        response = await retryWithBackoff(
          sendMegaETHTransaction, 
          poolConfig.maxRetries, 
          100, // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π retry –¥–ª—è real-time
          chainId
        );
        
        if (response.error) {
          throw new Error(`MegaETH Real-time Error: ${response.error.message}`);
        }
        
        txHash = response.result;
        console.log('‚ö° MegaETH instant transaction hash:', txHash);
        success = true;
        
        // –î–ª—è MegaETH realtime –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        return { 
          hash: txHash, 
          receipt: response.result,
          isInstant: true, // –§–ª–∞–≥ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
          network: 'MegaETH'
        };
        
      } else if (config.sendMethod === 'eth_sendRawTransactionSync') {
        // üì¶ RISE —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        console.log('üì¶ Using RISE eth_sendRawTransactionSync for fast execution...');
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), config.connectionTimeouts.retry);
        
        try {
          response = await fetch(rpcUrl, {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              jsonrpc: '2.0',
              method: 'eth_sendRawTransactionSync',
              params: [signedTx],
              id: Date.now()
            }),
            signal: controller.signal,
            mode: 'cors'
          });

          clearTimeout(timeoutId);
          
          const jsonResponse = await response.text();
          const result = safeJsonParse(jsonResponse);
          
          if (!result) {
            throw new Error('Invalid response format from RISE RPC');
          }
          
          if (result.error) {
            if (result.error.message?.includes('nonce too low')) {
              console.log('üîÑ RISE nonce too low detected');
              throw new Error('nonce too low');
            }
            throw new Error(result.error.message || 'RISE transaction failed');
          }

          success = true;
          return { 
            hash: result.result, 
            receipt: result.result,
            isInstant: true,
            network: 'RISE'
          };
        } catch (error) {
          clearTimeout(timeoutId);
          if (error.name === 'AbortError') {
            throw new Error('RISE RPC timeout');
          }
          throw error;
        }
        
      } else {
        // üîó –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        console.log('üîó Using standard eth_sendRawTransaction...');
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), config.connectionTimeouts.retry);
        
        try {
          response = await fetch(rpcUrl, {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              jsonrpc: '2.0',
              method: 'eth_sendRawTransaction',
              params: [signedTx],
              id: Date.now()
            }),
            signal: controller.signal,
            mode: 'cors'
          });

          clearTimeout(timeoutId);
          
          const jsonResponse = await response.text();
          const result = safeJsonParse(jsonResponse);
          
          if (!result) {
            throw new Error('Invalid response format from RPC');
          }
          
          if (result.error) {
            if (result.error.message?.includes('nonce too low')) {
              console.log('üîÑ Standard RPC nonce too low detected');
              throw new Error('nonce too low');
            }
            throw new Error(result.error.message || 'Transaction failed');
          }

          success = true;
          return { 
            hash: result.result,
            isInstant: false,
            network: config.name
          };
        } catch (error) {
          clearTimeout(timeoutId);
          if (error.name === 'AbortError') {
            throw new Error('Standard RPC timeout');
          }
          throw error;
        }
      }
    } catch (error) {
      console.error('‚ùå Send transaction error:', error);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ nonce –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π
      if (error.message?.includes('nonce too low')) {
        const embeddedWallet = getEmbeddedWallet();
        if (embeddedWallet) {
          console.log('üîÑ Refreshing nonce due to "nonce too low" error');
          try {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º nonce —Å —Å–µ—Ç–∏
            await getNextNonce(chainId, embeddedWallet.address, true);
            
            // –û—á–∏—â–∞–µ–º –ø—É–ª –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ nonces
            const chainKey = chainId.toString();
            const pool = preSignedPool.current[chainKey];
            if (pool) {
              console.log('üóëÔ∏è Clearing invalid pre-signed transaction pool');
              pool.transactions = [];
              pool.currentIndex = 0;
              pool.isReady = false;
              pool.hasTriggeredRefill = false;
              
              // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –≤ —Ñ–æ–Ω–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º nonce
              setTimeout(async () => {
                try {
                  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π nonce –∏–∑ —Å–µ—Ç–∏
                  const { publicClient } = await createClients(chainId);
                  const actualNonce = await publicClient.getTransactionCount({
                    address: embeddedWallet.address,
                    blockTag: 'pending'
                  });
                  
                  console.log(`üîÑ Recreating pool with actual network nonce: ${actualNonce}`);
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä nonce
                  const manager = getNonceManager(chainId, embeddedWallet.address);
                  manager.currentNonce = actualNonce;
                  manager.pendingNonce = actualNonce;
                  manager.lastUpdate = Date.now();
                  
                  // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—É–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º nonce
                  const poolConfig = ENHANCED_POOL_CONFIG[chainId] || ENHANCED_POOL_CONFIG.default;
                  await preSignBatch(chainId, actualNonce, poolConfig.batchSize);
                  console.log(`‚úÖ Pre-signed transaction pool recreated with correct nonces starting from ${actualNonce}`);
                } catch (recreateError) {
                  console.error('‚ùå Failed to recreate transaction pool:', recreateError);
                }
              }, 100);
            }
          } catch (nonceError) {
            console.error('Failed to refresh nonce:', nonceError);
          }
        }
      }
      
      throw error;
    } finally {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è RPC endpoint
      const responseTime = Date.now() - startTime;
      updateRpcHealth(chainId, rpcUrl, success, responseTime);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      if (success) {
        console.log(`‚úÖ Transaction sent successfully in ${responseTime}ms via ${config.sendMethod}`);
      }
    }
  };

  // –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å Real-Time Gaming –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
  const sendUpdate = async (chainId) => {
    const embeddedWallet = getEmbeddedWallet();
    if (!embeddedWallet) {
      throw new Error('No embedded wallet available');
    }

    // –î–ª—è MegaETH (instant transactions) –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ pending —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (chainId === 6342) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ pre-signed —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const chainKey = chainId.toString();
      const pool = preSignedPool.current[chainKey];
      const hasPreSignedTx = pool && pool.isReady && pool.transactions.length > pool.currentIndex;
      
      if (hasPreSignedTx) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å pre-signed —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Ä–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–≥–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if (transactionPendingCount.current > 10) {
          console.log('üö´ Maximum MegaETH throughput reached, throttling');
          throw new Error('Transaction throughput limit reached');
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç pre-signed, –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç
        if (transactionPendingCount.current > 2) {
          console.log('üö´ Too many concurrent realtime transactions');
          throw new Error('Realtime transaction limit reached');
        }
      }
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–≥—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
      if (transactionPending) {
        throw new Error('Transaction already pending, blocking jump');
      }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const performanceMetrics = initPerformanceMonitoring(chainId);
    const startTime = performance.now(); // –¢–æ—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫—á–µ–π–Ω–∞

    const config = ENHANCED_POOL_CONFIG[chainId] || ENHANCED_POOL_CONFIG.default;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å burst —Ä–µ–∂–∏–º
    if (config.burstMode && canExecuteBurst(chainId)) {
      console.log('üöÄ Using burst mode for transaction');
      return await queueBurstTransaction(chainId, async () => {
        return await executeTransaction(chainId, startTime);
      });
    } else {
      return await executeTransaction(chainId, startTime);
    }
  };

  // –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const executeTransaction = async (chainId, startTime) => {
    let signedTx = null;
    let blockchainTime = 0;
    let success = false;
    
    try {
      // –î–ª—è MegaETH –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—á–µ—Ç—á–∏–∫
      if (chainId !== 6342) {
        setTransactionPending(true);
      }
      transactionPendingCount.current++;
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
      signedTx = await getNextTransaction(chainId);
      
      if (!signedTx) {
        throw new Error('Failed to get transaction for sending');
      }
      
      console.log('‚ö° Sending instant on-chain jump transaction...');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      const txResult = await sendRawTransaction(chainId, signedTx);
      console.log('üì° Transaction sent:', txResult);

      const config = NETWORK_CONFIGS[chainId];
      let finalResult = txResult;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ç–∏
      if (config.sendMethod === 'realtime_sendRawTransaction') {
        // MegaETH: realtime –º–µ—Ç–æ–¥ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        console.log('‚úÖ MegaETH instant confirmation:', txResult);
        finalResult = txResult.receipt || txResult;
        success = true;
        
      } else if (config.sendMethod === 'eth_sendRawTransactionSync') {
        // RISE: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
        console.log('‚úÖ RISE sync confirmation:', txResult);
        finalResult = txResult.receipt || txResult;
        success = true;
        
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ—Ç–∏: –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        console.log('‚è≥ Waiting for transaction confirmation...');
        try {
          const { publicClient } = await createClients(chainId);
          const receipt = await Promise.race([
            publicClient.waitForTransactionReceipt({ 
              hash: txResult.hash,
              timeout: 30000 // 30 seconds timeout
            }),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error('Transaction confirmation timeout')), 35000)
            )
          ]);
          console.log('‚úÖ Transaction confirmed:', receipt);
          finalResult = receipt;
          success = true;
        } catch (confirmError) {
          console.warn('‚ö†Ô∏è Transaction confirmation failed, but transaction may still be valid:', confirmError);
          // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏
          finalResult = txResult;
          success = true; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
        }
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–ª—è Real-Time Gaming –º–µ—Ç—Ä–∏–∫
      blockchainTime = performance.now() - startTime;
      
      console.log(`üéÆ Jump transaction completed in ${Math.round(blockchainTime)}ms:`, finalResult);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const metrics = recordPerformanceMetric(chainId, blockchainTime, success);
      console.log(`üìä Performance: Avg ${Math.round(metrics.averageBlockchainTime)}ms, Success Rate ${metrics.successRate.toFixed(1)}%`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –∏–≥—Ä—É
      return {
        ...finalResult,
        blockchainTime: Math.round(blockchainTime),
        reactionTime: 0, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–≥—Ä–æ–π
        performanceMetrics: {
          averageBlockchainTime: Math.round(metrics.averageBlockchainTime),
          successRate: metrics.successRate,
          totalTransactions: metrics.totalTransactions
        }
      };
      
    } catch (error) {
      console.error('‚ùå Error sending on-chain movement:', error);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –º–µ—Ç—Ä–∏–∫—É
      blockchainTime = performance.now() - startTime;
      recordPerformanceMetric(chainId, blockchainTime, false);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
      if (error.message?.includes('nonce too low')) {
        console.log('üîÑ Nonce too low detected, refreshing nonce and retrying...');
        try {
          // –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º nonce –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
          const wallet = getEmbeddedWallet();
          if (wallet) {
            await getNextNonce(chainId, wallet.address, true);
            
            // –û—á–∏—â–∞–µ–º –ø—É–ª –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            const chainKey = chainId.toString();
            const pool = preSignedPool.current[chainKey];
            if (pool) {
              console.log('üóëÔ∏è Clearing invalid pre-signed transaction pool due to nonce error');
              pool.transactions = [];
              pool.currentIndex = 0;
              pool.isReady = false;
              pool.hasTriggeredRefill = false;
            }
            
            console.log('‚úÖ Nonce refreshed, please try again');
          } else {
            console.error('‚ùå No wallet available for nonce refresh');
          }
        } catch (nonceError) {
          console.error('‚ùå Failed to refresh nonce:', nonceError);
        }
      } else if (error.message?.includes('context deadline exceeded')) {
        console.log('‚è∞ Network timeout detected, transaction may still be processing...');
      } else if (error.message?.includes('insufficient funds')) {
        console.log('üí∞ Insufficient funds detected, consider calling faucet...');
      }
      
      throw new Error(`Blockchain transaction error: ${error.message}`);
    } finally {
      if (chainId !== 6342) {
        setTransactionPending(false);
      }
      transactionPendingCount.current = Math.max(0, transactionPendingCount.current - 1);
    }
  };

  // –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è instant gaming
  const initData = async (chainId) => {
    const chainKey = chainId.toString();
    if (isInitialized.current[chainKey] || isInitializing) {
      return;
    }

    try {
      setIsInitializing(true);
      console.log('üöÄ Starting instant blockchain initialization for chain:', chainId);

      // Wait for embedded wallet to be created (with retry)
      let embeddedWallet = null;
      let retries = 0;
      const maxRetries = 10;
      
      while (!embeddedWallet && retries < maxRetries) {
        embeddedWallet = getEmbeddedWallet();
        if (!embeddedWallet) {
          console.log(`Waiting for embedded wallet creation... (attempt ${retries + 1}/${maxRetries})`);
          await new Promise(resolve => setTimeout(resolve, 1000));
          retries++;
        }
      }

      if (!embeddedWallet) {
        throw new Error('No embedded wallet available');
      }

      console.log('‚úÖ Using embedded wallet address:', embeddedWallet.address);

      // –ü–æ–ª—É—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∏ (–º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º RPC –≤—ã–∑–æ–≤—ã)
      await getCachedChainParams(chainId);

      // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è nonce manager
      const nonceManager = getNonceManager(chainId, embeddedWallet.address);
      
      // –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä—É!
      const initializationPromises = [];
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π nonce
      const balanceAndNoncePromise = Promise.all([
        checkBalance(chainId),
        retryWithBackoff(async () => {
          const { publicClient } = await createClients(chainId);
          return await publicClient.getTransactionCount({
            address: embeddedWallet.address,
            blockTag: 'pending'
          });
        }, 3, 1000, chainId)
      ]).then(([currentBalance, initialNonce]) => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º nonce manager —Å —Ç–µ–∫—É—â–∏–º nonce
        nonceManager.currentNonce = initialNonce;
        nonceManager.pendingNonce = initialNonce;
        nonceManager.lastUpdate = Date.now();

        console.log('üí∞ Current balance:', currentBalance);
        console.log('üéØ Starting nonce:', initialNonce);

        // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 0.00005 ETH, –≤—ã–∑—ã–≤–∞–µ–º faucet –ê–°–ò–ù–•–†–û–ù–ù–û
        if (parseFloat(currentBalance) < 0.00005) {
          console.log(`üí∞ Balance is ${currentBalance} ETH (< 0.00005), calling faucet in background...`);
          
          // –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ò–ô faucet –≤—ã–∑–æ–≤
          callFaucet(embeddedWallet.address, chainId)
            .then(() => {
              console.log('‚úÖ Background faucet completed');
              // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
              setTimeout(() => checkBalance(chainId), 5000);
              // –û–±–Ω–æ–≤–ª—è–µ–º nonce –ø–æ—Å–ª–µ faucet
              return getNextNonce(chainId, embeddedWallet.address, true);
            })
            .catch(faucetError => {
              console.warn('‚ö†Ô∏è Background faucet failed (non-blocking):', faucetError);
            });
        }
        
        return { currentBalance, initialNonce };
      });
      
      initializationPromises.push(balanceAndNoncePromise);

      // 2. –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è instant gaming
      isInitialized.current[chainKey] = true;
      console.log('‚ö° INSTANT GAMING MODE ENABLED - –∏–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞!');
      
      // 3. Pre-signing –≤ –§–û–ù–û–í–û–ú —Ä–µ–∂–∏–º–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä—É)
      const poolConfig = ENHANCED_POOL_CONFIG[chainId] || ENHANCED_POOL_CONFIG.default;
      const fallbackConfig = getFallbackConfig(chainId);
      
      let batchSize = poolConfig.poolSize;
      if (fallbackConfig) {
        batchSize = fallbackConfig.reducedBatchSize;
        console.log(`Using fallback batch size: ${batchSize}`);
      }
      
      // –§–û–ù–û–í–û–ï –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ
      const preSigningPromise = balanceAndNoncePromise.then(({ initialNonce }) => {
        console.log(`üîÑ Background pre-signing ${batchSize} transactions starting from nonce ${initialNonce}`);
        
        // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º nonces –¥–ª—è pre-signing
        const manager = getNonceManager(chainId, embeddedWallet.address);
        if (manager) {
          manager.pendingNonce = Math.max(manager.pendingNonce || initialNonce, initialNonce + batchSize);
        }
        
        return preSignBatch(chainId, initialNonce, batchSize)
          .then(() => {
            const pool = preSignedPool.current[chainKey];
            if (pool && pool.transactions.length > 0) {
              console.log(`‚úÖ Background pre-signed ${pool.transactions.length} transactions - performance boost ready!`);
            } else {
              console.log('‚ö†Ô∏è Pre-signing completed with 0 transactions - using realtime mode');
            }
          })
          .catch(error => {
            console.warn('‚ö†Ô∏è Background pre-signing failed (non-blocking):', error);
            enableFallbackMode(chainId);
            console.log('üîÑ Enabled realtime fallback mode - game continues smoothly');
          });
      });
      
      // –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú pre-signing –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–µ –Ω–∞—á–∞—Ç—å—Å—è —Å—Ä–∞–∑—É, –∞ pre-signing —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ
      // initializationPromises.push(preSigningPromise);
      
             // –ó–∞–ø—É—Å–∫–∞–µ–º pre-signing –≤ —Ñ–æ–Ω–µ
       preSigningPromise.catch(error => {
         console.warn('Background pre-signing error (non-critical):', error);
       });
      
      // –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (–±–∞–ª–∞–Ω—Å + nonce)
      await balanceAndNoncePromise;
      
      console.log('üéÆ Blockchain ready for instant gaming on chain:', chainId);
      
      if (fallbackConfig) {
        console.log('‚ö†Ô∏è Running in fallback mode - reduced performance expected');
      } else {
        console.log('üöÄ Full performance mode activating in background...');
      }
      
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ
      Promise.all(initializationPromises.slice(1)).then(() => {
        console.log('‚úÖ Full blockchain optimization complete');
      }).catch(error => {
        console.warn('‚ö†Ô∏è Some background optimizations failed (non-critical):', error);
      });
      
    } catch (error) {
      console.error('‚ùå Critical initialization error:', error);
      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –ø–æ–∑–≤–æ–ª—è–µ–º –∏–≥—Ä–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ fallback —Ä–µ–∂–∏–º–µ
      isInitialized.current[chainKey] = true;
      enableFallbackMode(chainId);
      console.log('üîÑ Emergency fallback mode enabled - game will work with realtime signing');
    } finally {
      setIsInitializing(false);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const getContractNumber = async (chainId) => {
    try {
      const { publicClient, config } = await createClients(chainId);
      
      const number = await publicClient.readContract({
        address: config.contractAddress,
        abi: UPDATER_ABI,
        functionName: 'number'
      });

      setContractNumber(Number(number));
      return Number(number);
    } catch (error) {
      console.error('Error reading contract number:', error);
      return 0;
    }
  };

  // –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û –£–õ–£–ß–®–ï–ù–ù–ê–Ø retry —Ñ—É–Ω–∫—Ü–∏—è —Å circuit breaker –∏ —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const circuitBreakers = useRef({});

  const getCircuitBreaker = (chainId) => {
    if (!circuitBreakers.current[chainId]) {
      circuitBreakers.current[chainId] = {
        failures: 0,
        lastFailureTime: 0,
        state: 'CLOSED', // CLOSED, OPEN, HALF_OPEN
        threshold: 5, // –û—Ç–∫—Ä—ã–≤–∞–µ–º circuit –ø–æ—Å–ª–µ 5 –Ω–µ—É–¥–∞—á
        timeout: 60000 // 60 —Å–µ–∫—É–Ω–¥ –¥–æ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ HALF_OPEN
      };
    }
    return circuitBreakers.current[chainId];
  };

  const retryWithBackoff = async (fn, maxRetries = 3, baseDelay = 1000, chainId = null) => {
    let lastError;
    let circuitBreaker = null;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º circuit breaker –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chainId
    if (chainId) {
      circuitBreaker = getCircuitBreaker(chainId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ circuit breaker
      if (circuitBreaker.state === 'OPEN') {
        const timeSinceLastFailure = Date.now() - circuitBreaker.lastFailureTime;
        if (timeSinceLastFailure < circuitBreaker.timeout) {
          throw new Error(`Circuit breaker is OPEN for chain ${chainId}. Try again in ${Math.round((circuitBreaker.timeout - timeSinceLastFailure) / 1000)} seconds.`);
        } else {
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ HALF_OPEN –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          circuitBreaker.state = 'HALF_OPEN';
          console.log(`Circuit breaker for chain ${chainId} entering HALF_OPEN state`);
        }
      }
    }
    
    for (let i = 0; i < maxRetries; i++) {
      try {
        const result = await fn();
        
        // –£—Å–ø–µ—Ö - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º circuit breaker
        if (circuitBreaker) {
          circuitBreaker.failures = 0;
          circuitBreaker.state = 'CLOSED';
        }
        
        return result;
      } catch (error) {
        lastError = error;
        const isLastRetry = i === maxRetries - 1;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º circuit breaker –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (circuitBreaker) {
          circuitBreaker.failures++;
          circuitBreaker.lastFailureTime = Date.now();
          
          // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ OPEN —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥
          if (circuitBreaker.failures >= circuitBreaker.threshold) {
            circuitBreaker.state = 'OPEN';
            console.warn(`Circuit breaker OPENED for chain ${chainId} after ${circuitBreaker.failures} failures`);
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫—É
        const isRetryableError = 
          error.status === 429 || // Too Many Requests
          error.status === 403 || // Forbidden (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ)
          error.status === 500 || // Internal Server Error
          error.status === 502 || // Bad Gateway
          error.status === 503 || // Service Unavailable
          error.status === 504 || // Gateway Timeout
          error.message?.includes('rate limit') ||
          error.message?.includes('timeout') ||
          error.message?.includes('context deadline exceeded') ||
          error.message?.includes('connection') ||
          error.message?.includes('network') ||
          error.message?.includes('fetch') ||
          error.name === 'AbortError' ||
          error.name === 'TypeError'; // Network errors

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å
        const isNonRetryableError = 
          error.message?.includes('nonce too low') ||
          error.message?.includes('insufficient funds') ||
          error.message?.includes('gas too low') ||
          error.message?.includes('invalid signature') ||
          error.message?.includes('execution reverted');

        if (isLastRetry || isNonRetryableError || !isRetryableError) {
          if (isNonRetryableError) {
            console.log(`Non-retryable error encountered: ${error.message}`);
          }
          throw error;
        }

        // Circuit breaker –º–æ–∂–µ—Ç –∑–∞—Å—Ç–∞–≤–∏—Ç—å –Ω–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Ä–∞–Ω—å—à–µ
        if (circuitBreaker && circuitBreaker.state === 'OPEN') {
          console.log(`Circuit breaker is OPEN, stopping retries for chain ${chainId}`);
          break;
        }

        // Exponential backoff —Å jitter –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è thundering herd
        const jitter = Math.random() * 1000;
        const delay = Math.min(baseDelay * Math.pow(2, i) + jitter, 30000); // –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
        
        console.log(`Retry attempt ${i + 1}/${maxRetries} after ${Math.round(delay)}ms delay due to:`, error.message);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    throw lastError;
  };

  // Debug —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –≤ development)
  useEffect(() => {
    if (process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost') {
      window.blockchainDebug = {
        getRPCHealth: (chainId) => rpcHealthStatus.current[chainId],
        getCircuitBreaker: (chainId) => circuitBreakers.current[chainId],
        getTransactionPool: (chainId) => preSignedPool.current[chainId],
        getBurstState: (chainId) => burstState.current[chainId],
        getConnectionPool: () => activeConnections.current,
        getNonceManager: (chainId, address) => nonceManager.current[`${chainId}-${address}`],
        
        // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        forceCircuitBreakerOpen: (chainId) => {
          const cb = getCircuitBreaker(chainId);
          cb.state = 'OPEN';
          cb.failures = cb.threshold;
          cb.lastFailureTime = Date.now();
          console.log(`Force opened circuit breaker for chain ${chainId}`);
        },
        
        resetCircuitBreaker: (chainId) => {
          const cb = getCircuitBreaker(chainId);
          cb.state = 'CLOSED';
          cb.failures = 0;
          console.log(`Reset circuit breaker for chain ${chainId}`);
        },
        
        clearTransactionPool: (chainId) => {
          const chainKey = chainId.toString();
          if (preSignedPool.current[chainKey]) {
            preSignedPool.current[chainKey].transactions = [];
            preSignedPool.current[chainKey].currentIndex = 0;
            console.log(`Cleared transaction pool for chain ${chainId}`);
          }
        },
        
        generateHealthReport: (chainId) => {
          const rpcHealth = rpcHealthStatus.current[chainId];
          const poolStatus = preSignedPool.current[chainId?.toString()];
          const circuitBreakerState = circuitBreakers.current[chainId];
          
          const report = {
            timestamp: new Date().toISOString(),
            chainId,
            rpcEndpoints: rpcHealth,
            transactionPool: poolStatus ? {
              totalTransactions: poolStatus.transactions.length,
              currentIndex: poolStatus.currentIndex,
              availableTransactions: poolStatus.transactions.length - poolStatus.currentIndex,
              isRefilling: poolStatus.isRefilling
            } : null,
            circuitBreaker: circuitBreakerState,
            connections: activeConnections.current,
            burstState: burstState.current[chainId]
          };
          
          console.table(report);
          return report;
        }
      };
      
      console.log('üîß Blockchain debug utilities loaded. Use window.blockchainDebug for monitoring.');
      console.log('üìä Example: window.blockchainDebug.generateHealthReport(6342)');
    }
  }, []);

  // Debug —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –≤ development) - –î–û–ü–û–õ–ù–ï–ù–ù–´–ï –¥–ª—è Real-Time Gaming
  useEffect(() => {
    if (process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost') {
      window.blockchainDebug = {
        getRPCHealth: (chainId) => rpcHealthStatus.current[chainId],
        getCircuitBreaker: (chainId) => circuitBreakers.current[chainId],
        getTransactionPool: (chainId) => preSignedPool.current[chainId],
        getBurstState: (chainId) => burstState.current[chainId],
        getConnectionPool: () => activeConnections.current,
        getNonceManager: (chainId, address) => nonceManager.current[`${chainId}-${address}`],
        
        // üéÆ –ù–û–í–´–ï —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è Real-Time Gaming –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        getPerformanceMetrics: (chainId) => performanceMetrics.current[chainId],
        getGlobalCache: () => {
          try {
            const cached = localStorage.getItem(GLOBAL_CACHE_KEY);
            return cached ? JSON.parse(cached) : null;
          } catch (error) {
            return null;
          }
        },
        
        // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        forceCircuitBreakerOpen: (chainId) => {
          const cb = getCircuitBreaker(chainId);
          cb.state = 'OPEN';
          cb.failures = cb.threshold;
          cb.lastFailureTime = Date.now();
          console.log(`Force opened circuit breaker for chain ${chainId}`);
        },
        
        resetCircuitBreaker: (chainId) => {
          const cb = getCircuitBreaker(chainId);
          cb.state = 'CLOSED';
          cb.failures = 0;
          console.log(`Reset circuit breaker for chain ${chainId}`);
        },
        
        clearTransactionPool: (chainId) => {
          const chainKey = chainId.toString();
          if (preSignedPool.current[chainKey]) {
            preSignedPool.current[chainKey].transactions = [];
            preSignedPool.current[chainKey].currentIndex = 0;
            console.log(`Cleared transaction pool for chain ${chainId}`);
          }
        },
        
        // üéØ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        generatePerformanceReport: (chainId) => {
          const rpcHealth = rpcHealthStatus.current[chainId];
          const poolStatus = preSignedPool.current[chainId?.toString()];
          const circuitBreakerState = circuitBreakers.current[chainId];
          const performanceData = performanceMetrics.current[chainId];
          const globalCache = window.blockchainDebug.getGlobalCache();
          
          const report = {
            timestamp: new Date().toISOString(),
            chainId,
            network: NETWORK_CONFIGS[chainId]?.name || 'Unknown',
            
            // RPC –∑–¥–æ—Ä–æ–≤—å–µ
            rpcEndpoints: rpcHealth ? {
              current: rpcHealth.endpoints[rpcHealth.currentEndpointIndex]?.url,
              healthyCount: rpcHealth.endpoints.filter(ep => ep.healthy).length,
              totalCount: rpcHealth.endpoints.length,
              endpoints: rpcHealth.endpoints.map(ep => ({
                url: ep.url,
                healthy: ep.healthy,
                failures: ep.consecutiveFailures,
                responseTime: ep.responseTime
              }))
            } : null,
            
            // –ü—É–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            transactionPool: poolStatus ? {
              totalTransactions: poolStatus.transactions.length,
              currentIndex: poolStatus.currentIndex,
              availableTransactions: poolStatus.transactions.length - poolStatus.currentIndex,
              poolUtilization: `${Math.round((poolStatus.currentIndex / poolStatus.transactions.length) * 100)}%`,
              isRefilling: poolStatus.isRefilling,
              hasTriggeredRefill: poolStatus.hasTriggeredRefill
            } : null,
            
            // Circuit breaker
            circuitBreaker: circuitBreakerState ? {
              state: circuitBreakerState.state,
              failures: circuitBreakerState.failures,
              threshold: circuitBreakerState.threshold,
              lastFailure: circuitBreakerState.lastFailureTime ? 
                new Date(circuitBreakerState.lastFailureTime).toISOString() : null
            } : null,
            
            // üéÆ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Real-Time Gaming
            performance: performanceData ? {
              totalTransactions: performanceData.totalTransactions,
              successfulTransactions: performanceData.successfulTransactions,
              successRate: `${performanceData.successRate.toFixed(1)}%`,
              averageBlockchainTime: `${Math.round(performanceData.averageBlockchainTime)}ms`,
              recentTransactions: performanceData.recentTransactions.slice(-10).map(tx => ({
                blockchainTime: `${tx.blockchainTime}ms`,
                success: tx.success,
                timestamp: new Date(tx.timestamp).toISOString()
              })),
              performanceGrade: performanceData.averageBlockchainTime < 1000 ? 'üöÄ INSTANT' :
                              performanceData.averageBlockchainTime < 3000 ? '‚ö° FAST' :
                              performanceData.averageBlockchainTime < 5000 ? 'üî• GOOD' : 'üêå SLOW'
            } : null,
            
            // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            connections: activeConnections.current,
            
            // Burst —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            burstState: burstState.current[chainId] ? {
              lastBurstTime: new Date(burstState.current[chainId].lastBurstTime).toISOString(),
              burstCount: burstState.current[chainId].burstCount,
              inCooldown: burstState.current[chainId].inCooldown,
              pendingTransactions: burstState.current[chainId].pendingTransactions.length
            } : null,
            
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à
            globalCache: globalCache ? {
              gasParamsAge: globalCache.gasParams ? 
                `${Math.round((Date.now() - globalCache.gasParams.timestamp) / 1000)}s ago` : 'None',
              chainParamsAge: globalCache.chainParams ? 
                `${Math.round((Date.now() - globalCache.chainParams.timestamp) / 1000)}s ago` : 'None',
              rpcHealthAge: globalCache.rpcHealth ? 
                `${Math.round((Date.now() - globalCache.rpcHealth.timestamp) / 1000)}s ago` : 'None'
            } : null
          };
          
          console.group(`üìä Performance Report - ${report.network} (Chain ${chainId})`);
          console.table(report.performance);
          console.log('üîó RPC Health:', report.rpcEndpoints);
          console.log('üéØ Transaction Pool:', report.transactionPool);
          console.log('‚ö° Circuit Breaker:', report.circuitBreaker);
          console.log('üöÄ Burst State:', report.burstState);
          console.log('üíæ Global Cache:', report.globalCache);
          console.groupEnd();
          
          return report;
        },
        
        // –ë—ã—Å—Ç—Ä—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        quickStats: (chainId) => {
          const perf = performanceMetrics.current[chainId];
          const pool = preSignedPool.current[chainId?.toString()];
          
          if (perf && pool) {
            console.log(`üéÆ ${NETWORK_CONFIGS[chainId]?.name || 'Chain ' + chainId}:`);
            console.log(`  ‚ö° Avg Speed: ${Math.round(perf.averageBlockchainTime)}ms`);
            console.log(`  üìä Success Rate: ${perf.successRate.toFixed(1)}%`);
            console.log(`  üéØ Pool Status: ${pool.transactions.length - pool.currentIndex}/${pool.transactions.length} ready`);
            console.log(`  üöÄ Performance: ${perf.averageBlockchainTime < 1000 ? 'INSTANT' : perf.averageBlockchainTime < 3000 ? 'FAST' : 'SLOW'}`);
          } else {
            console.log('üìä No performance data available yet');
          }
        },
        
        // üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô —Å–±—Ä–æ—Å circuit breaker –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        forceResetAllCircuitBreakers: () => {
          Object.keys(circuitBreakers.current).forEach(chainId => {
            const cb = circuitBreakers.current[chainId];
            if (cb) {
              cb.state = 'CLOSED';
              cb.failures = 0;
              cb.lastFailureTime = 0;
              console.log(`‚úÖ Force reset circuit breaker for chain ${chainId}`);
            }
          });
          console.log('üöÄ All circuit breakers reset - ready for gaming!');
        }
      };
      
      console.log('üîß Blockchain debug utilities loaded. Use window.blockchainDebug for monitoring.');
      console.log('üìä Examples:');
      console.log('  ‚Ä¢ window.blockchainDebug.generatePerformanceReport(6342)');
      console.log('  ‚Ä¢ window.blockchainDebug.quickStats(6342)');
      console.log('  ‚Ä¢ window.blockchainDebug.getPerformanceMetrics(6342)');
      console.log('  ‚Ä¢ window.blockchainDebug.forceResetAllCircuitBreakers() // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å');
      
      // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô —Å–±—Ä–æ—Å circuit breakers –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      setTimeout(() => {
        Object.keys(circuitBreakers.current).forEach(chainId => {
          const cb = circuitBreakers.current[chainId];
          if (cb && cb.state === 'OPEN') {
            cb.state = 'CLOSED';
            cb.failures = 0;
            console.log(`üîÑ Auto-reset circuit breaker for chain ${chainId} on page load`);
          }
        });
      }, 2000); // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    }
  }, []);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isInitializing,
    transactionPending,
    balance,
    contractNumber,
    
    // –ú–µ—Ç–æ–¥—ã
    initData,
    sendUpdate,
    checkBalance,
    callFaucet,
    getContractNumber,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getEmbeddedWallet,
    isAuthenticated: authenticated,
    isReady: authenticated && wallets.length > 0,
    
    // Debug –º–µ—Ç–æ–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    ...(process.env.NODE_ENV === 'development' && {
      debugGetRPCHealth: (chainId) => rpcHealthStatus.current[chainId],
      debugGetCircuitBreaker: (chainId) => circuitBreakers.current[chainId],
      debugGenerateReport: (chainId) => window.blockchainDebug?.generateHealthReport(chainId)
    })
  };
};