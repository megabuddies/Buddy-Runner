import React, { useState, useEffect } from 'react';
import { logger, setLogLevel, getCurrentLogLevel, LOG_LEVELS } from '../config/logging';
import '../styles/LogLevelControl.css';

const LogLevelControl = () => {
  const [currentLevel, setCurrentLevel] = useState(getCurrentLogLevel());
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    setCurrentLevel(getCurrentLogLevel());
  }, []);

  const handleLevelChange = (level) => {
    setLogLevel(level);
    setCurrentLevel(level);
  };

  const getLevelName = (level) => {
    const names = {
      [LOG_LEVELS.ERROR]: '–¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏',
      [LOG_LEVELS.WARN]: '–û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è',
      [LOG_LEVELS.INFO]: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      [LOG_LEVELS.DEBUG]: '–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      [LOG_LEVELS.VERBOSE]: '–í—Å–µ –ª–æ–≥–∏'
    };
    return names[level] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  };

  const getLevelDescription = (level) => {
    const descriptions = {
      [LOG_LEVELS.ERROR]: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏',
      [LOG_LEVELS.WARN]: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è',
      [LOG_LEVELS.INFO]: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      [LOG_LEVELS.DEBUG]: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
      [LOG_LEVELS.VERBOSE]: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏, –≤–∫–ª—é—á–∞—è –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–∫—É'
    };
    return descriptions[level] || '';
  };

  const getLevelIcon = (level) => {
    const icons = {
      [LOG_LEVELS.ERROR]: 'üö®',
      [LOG_LEVELS.WARN]: '‚ö†Ô∏è',
      [LOG_LEVELS.INFO]: '‚ÑπÔ∏è',
      [LOG_LEVELS.DEBUG]: 'üîç',
      [LOG_LEVELS.VERBOSE]: 'üìù'
    };
    return icons[level] || '‚ùì';
  };

  return (
    <div className="log-level-control">
      <button 
        className="log-level-toggle"
        onClick={() => setIsVisible(!isVisible)}
        title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
      >
        {getLevelIcon(currentLevel)} –õ–æ–≥–∏
      </button>
      
      {isVisible && (
        <div className="log-level-panel">
          <div className="log-level-header">
            <h3>–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
            <button 
              className="close-button"
              onClick={() => setIsVisible(false)}
            >
              ‚úï
            </button>
          </div>
          
          <div className="log-level-options">
            {Object.entries(LOG_LEVELS).map(([name, level]) => (
              <div 
                key={level}
                className={`log-level-option ${currentLevel === level ? 'active' : ''}`}
                onClick={() => handleLevelChange(level)}
              >
                <div className="log-level-icon">
                  {getLevelIcon(level)}
                </div>
                <div className="log-level-info">
                  <div className="log-level-name">
                    {getLevelName(level)}
                  </div>
                  <div className="log-level-description">
                    {getLevelDescription(level)}
                  </div>
                </div>
                {currentLevel === level && (
                  <div className="log-level-check">
                    ‚úì
                  </div>
                )}
              </div>
            ))}
          </div>
          
          <div className="log-level-footer">
            <button 
              className="test-log-button"
              onClick={() => {
                logger.error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞');
                logger.warn('–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ');
                logger.info('–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
                logger.debug('–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ª–∞–¥–∫–∞');
                logger.verbose('–¢–µ—Å—Ç–æ–≤–∞—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞');
              }}
            >
              –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default LogLevelControl;