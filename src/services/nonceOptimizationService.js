// –°–µ—Ä–≤–∏—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è nonce –¥–ª—è –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

class NonceOptimizationService {
  constructor() {
    // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ nonce –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
    this.nonceManagers = new Map();
    
    // –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ nonce –¥–ª—è –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    this.reservedNonces = new Map();
    
    // –ö—ç—à nonce —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ RPC –≤—ã–∑–æ–≤–æ–≤
    this.nonceCache = new Map();
    
    // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ nonce (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
    this.cacheLifetime = {
      6342: 30 * 1000,    // MegaETH - 30 —Å–µ–∫—É–Ω–¥ (–±—ã—Å—Ç—Ä—ã–µ –±–ª–æ–∫–∏)
      31337: 60 * 1000,   // Foundry - 1 –º–∏–Ω—É—Ç–∞ (–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è —Å—Ä–µ–¥–∞)
      50311: 45 * 1000,   // Somnia - 45 —Å–µ–∫—É–Ω–¥
      1313161556: 45 * 1000, // RISE - 45 —Å–µ–∫—É–Ω–¥
      default: 45 * 1000   // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 45 —Å–µ–∫—É–Ω–¥
    };
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è nonce
    this.strategies = {
      'pre_signed_pool': {
        reserveAhead: 100,     // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º 100 nonce –≤–ø–µ—Ä–µ–¥ –¥–ª—è –ø—É–ª–∞
        refreshThreshold: 0.3,  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ 30%
        maxPendingNonces: 150   // –ú–∞–∫—Å–∏–º—É–º pending nonces
      },
      'realtime': {
        reserveAhead: 5,       // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º 5 nonce –¥–ª—è realtime
        refreshThreshold: 0.6,  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ 60%
        maxPendingNonces: 10    // –ú–∞–∫—Å–∏–º—É–º pending nonces –¥–ª—è realtime
      },
      'hybrid': {
        reserveAhead: 50,      // –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º
        refreshThreshold: 0.4,
        maxPendingNonces: 75
      }
    };
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è nonce –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    this.usageStats = new Map();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    setInterval(() => this.cleanupExpiredData(), 2 * 60 * 1000);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ nonce –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏ –∏ –∞–¥—Ä–µ—Å–∞
  getNonceManager(chainId, address) {
    const key = `${chainId}-${address.toLowerCase()}`;
    
    if (!this.nonceManagers.has(key)) {
      this.nonceManagers.set(key, {
        chainId,
        address: address.toLowerCase(),
        currentNonce: null,
        pendingNonce: null,
        reservedNonces: new Set(),
        lastUpdate: 0,
        isUpdating: false,
        strategy: 'pre_signed_pool', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—É–ª–∞
        totalAllocated: 0,
        totalUsed: 0
      });
    }
    
    return this.nonceManagers.get(key);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è nonce manager —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º nonce –∏–∑ —Å–µ—Ç–∏
  async initializeNonceManager(chainId, address, publicClient, strategy = 'pre_signed_pool') {
    const manager = this.getNonceManager(chainId, address);
    const cacheKey = `${chainId}-${address.toLowerCase()}`;
    
    console.log(`üéØ Initializing nonce manager for ${address} on chain ${chainId} with ${strategy} strategy`);
    
    try {
      manager.isUpdating = true;
      manager.strategy = strategy;
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π nonce –∏–∑ —Å–µ—Ç–∏
      const [latestNonce, pendingNonce] = await Promise.all([
        publicClient.getTransactionCount({ address, blockTag: 'latest' }),
        publicClient.getTransactionCount({ address, blockTag: 'pending' })
      ]);
      
      const networkNonce = Math.max(latestNonce, pendingNonce);
      
      manager.currentNonce = networkNonce;
      manager.pendingNonce = networkNonce;
      manager.lastUpdate = Date.now();
      manager.totalAllocated = networkNonce;
      
      // –ö—ç—à–∏—Ä—É–µ–º nonce
      this.nonceCache.set(cacheKey, {
        nonce: networkNonce,
        timestamp: Date.now()
      });
      
      console.log(`‚úÖ Nonce manager initialized: current=${networkNonce}, strategy=${strategy}`);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (!this.usageStats.has(cacheKey)) {
        this.usageStats.set(cacheKey, {
          allocations: [],
          averageAllocationTime: 0,
          cacheHitRate: 0,
          totalAllocations: 0,
          successfulAllocations: 0
        });
      }
      
      return networkNonce;
      
    } catch (error) {
      console.error('‚ùå Error initializing nonce manager:', error);
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      const cached = this.nonceCache.get(cacheKey);
      if (cached) {
        manager.currentNonce = cached.nonce;
        manager.pendingNonce = cached.nonce;
        console.log(`üîÑ Using cached nonce ${cached.nonce} due to initialization error`);
        return cached.nonce;
      }
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
      manager.currentNonce = 0;
      manager.pendingNonce = 0;
      console.warn(`‚ö†Ô∏è Initialized with nonce 0 due to errors`);
      return 0;
      
    } finally {
      manager.isUpdating = false;
    }
  }

  // –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ nonce –¥–ª—è –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  async reserveNonceRange(chainId, address, count, publicClient = null) {
    const manager = this.getNonceManager(chainId, address);
    const strategy = this.strategies[manager.strategy];
    
    console.log(`üìù Reserving ${count} nonces for pre-signed transactions (strategy: ${manager.strategy})`);
    
    // –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
    if (manager.currentNonce === null && publicClient) {
      await this.initializeNonceManager(chainId, address, publicClient, manager.strategy);
    }
    
    if (manager.currentNonce === null) {
      throw new Error('Nonce manager not initialized and no publicClient provided');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏ –ª–∏–º–∏—Ç pending nonces
    const currentPending = manager.pendingNonce - manager.currentNonce;
    if (currentPending + count > strategy.maxPendingNonces) {
      console.warn(`‚ö†Ô∏è Reservation would exceed max pending nonces (${currentPending + count} > ${strategy.maxPendingNonces})`);
      // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ª–∏–º–∏—Ç–∞
      count = Math.max(0, strategy.maxPendingNonces - currentPending);
      if (count === 0) {
        throw new Error('Cannot reserve nonces: pending limit exceeded');
      }
    }
    
    const startNonce = manager.pendingNonce;
    const endNonce = startNonce + count;
    
    // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω nonces
    const reservedRange = [];
    for (let i = startNonce; i < endNonce; i++) {
      manager.reservedNonces.add(i);
      reservedRange.push(i);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º pending nonce
    manager.pendingNonce = endNonce;
    manager.totalAllocated += count;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = this.usageStats.get(`${chainId}-${address.toLowerCase()}`);
    if (stats) {
      stats.totalAllocations++;
      stats.successfulAllocations++;
      stats.allocations.push({
        count,
        startNonce,
        timestamp: Date.now(),
        type: 'batch_reservation'
      });
      
      // –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∞–ª–ª–æ–∫–∞—Ü–∏–π
      if (stats.allocations.length > 100) {
        stats.allocations.shift();
      }
    }
    
    console.log(`‚úÖ Reserved nonces ${startNonce}-${endNonce - 1} (${count} total)`);
    console.log(`üìä Nonce status: current=${manager.currentNonce}, pending=${manager.pendingNonce}, reserved=${manager.reservedNonces.size}`);
    
    return {
      startNonce,
      endNonce: endNonce - 1,
      count,
      reservedNonces: reservedRange
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ nonce (–¥–ª—è realtime —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
  async getNextNonce(chainId, address, publicClient = null, forceRefresh = false) {
    const manager = this.getNonceManager(chainId, address);
    const cacheKey = `${chainId}-${address.toLowerCase()}`;
    
    // –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
    if (manager.currentNonce === null && publicClient) {
      return await this.initializeNonceManager(chainId, address, publicClient, 'realtime');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å nonce
    const now = Date.now();
    const cacheLifetime = this.cacheLifetime[chainId] || this.cacheLifetime.default;
    const shouldRefresh = forceRefresh || 
                         (now - manager.lastUpdate) > cacheLifetime ||
                         manager.currentNonce === null;
    
    if (shouldRefresh && publicClient && !manager.isUpdating) {
      await this.refreshNonceFromNetwork(chainId, address, publicClient);
    }
    
    if (manager.currentNonce === null) {
      throw new Error('Nonce manager not available and cannot refresh from network');
    }
    
    // –í—ã–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π nonce
    const nextNonce = manager.pendingNonce;
    manager.pendingNonce += 1;
    manager.totalAllocated += 1;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = this.usageStats.get(cacheKey);
    if (stats) {
      stats.totalAllocations++;
      stats.successfulAllocations++;
      stats.allocations.push({
        nonce: nextNonce,
        timestamp: now,
        type: 'single_allocation'
      });
    }
    
    console.log(`üéØ Allocated nonce ${nextNonce} for realtime transaction`);
    
    return nextNonce;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ nonce –∏–∑ —Å–µ—Ç–∏
  async refreshNonceFromNetwork(chainId, address, publicClient) {
    const manager = this.getNonceManager(chainId, address);
    const cacheKey = `${chainId}-${address.toLowerCase()}`;
    
    if (manager.isUpdating) {
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      let waitTime = 0;
      while (manager.isUpdating && waitTime < 5000) {
        await new Promise(resolve => setTimeout(resolve, 100));
        waitTime += 100;
      }
      return;
    }
    
    try {
      manager.isUpdating = true;
      
      const [latestNonce, pendingNonce] = await Promise.all([
        publicClient.getTransactionCount({ address, blockTag: 'latest' }),
        publicClient.getTransactionCount({ address, blockTag: 'pending' })
      ]);
      
      const networkNonce = Math.max(latestNonce, pendingNonce);
      const previousNonce = manager.currentNonce;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ç–µ–≤–æ–π nonce –±–æ–ª—å—à–µ –Ω–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ
      if (networkNonce > manager.currentNonce) {
        manager.currentNonce = networkNonce;
        
        // –ï—Å–ª–∏ pending nonce –º–µ–Ω—å—à–µ —Å–µ—Ç–µ–≤–æ–≥–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ç–æ–∂–µ
        if (manager.pendingNonce < networkNonce) {
          manager.pendingNonce = networkNonce;
        }
        
        // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        manager.reservedNonces.forEach(nonce => {
          if (nonce < networkNonce) {
            manager.reservedNonces.delete(nonce);
          }
        });
        
        console.log(`üîÑ Nonce refreshed for ${address} on chain ${chainId}: ${previousNonce} ‚Üí ${networkNonce}`);
        
      } else {
        console.log(`üîÑ Nonce up to date for ${address} on chain ${chainId}: ${networkNonce}`);
      }
      
      manager.lastUpdate = Date.now();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      this.nonceCache.set(cacheKey, {
        nonce: networkNonce,
        timestamp: Date.now()
      });
      
    } catch (error) {
      console.error('‚ùå Error refreshing nonce from network:', error);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const cached = this.nonceCache.get(cacheKey);
      if (cached && manager.currentNonce < cached.nonce) {
        manager.currentNonce = cached.nonce;
        manager.pendingNonce = Math.max(manager.pendingNonce, cached.nonce);
        console.log(`üîÑ Using cached nonce ${cached.nonce} due to network error`);
      }
      
    } finally {
      manager.isUpdating = false;
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è nonce (–∫–æ–≥–¥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞)
  confirmNonceUsage(chainId, address, nonce) {
    const manager = this.getNonceManager(chainId, address);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    manager.reservedNonces.delete(nonce);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    manager.totalUsed += 1;
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π pending nonce, –æ–±–Ω–æ–≤–ª—è–µ–º current
    if (nonce === manager.currentNonce) {
      manager.currentNonce += 1;
    }
    
    console.log(`‚úÖ Confirmed nonce usage: ${nonce}`);
  }

  // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ nonce (–ø—Ä–∏ –æ—à–∏–±–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
  releaseNonce(chainId, address, nonce) {
    const manager = this.getNonceManager(chainId, address);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    manager.reservedNonces.delete(nonce);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π pending nonce, —É–º–µ–Ω—å—à–∞–µ–º pending
    if (nonce === manager.pendingNonce - 1) {
      manager.pendingNonce -= 1;
    }
    
    console.log(`üîÑ Released unused nonce: ${nonce}`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ nonce manager
  getNonceStatus(chainId, address) {
    const manager = this.getNonceManager(chainId, address);
    const stats = this.usageStats.get(`${chainId}-${address.toLowerCase()}`);
    
    return {
      initialized: manager.currentNonce !== null,
      currentNonce: manager.currentNonce,
      pendingNonce: manager.pendingNonce,
      reservedCount: manager.reservedNonces.size,
      pendingCount: manager.currentNonce !== null ? manager.pendingNonce - manager.currentNonce : 0,
      strategy: manager.strategy,
      lastUpdate: new Date(manager.lastUpdate).toISOString(),
      isUpdating: manager.isUpdating,
      totalAllocated: manager.totalAllocated,
      totalUsed: manager.totalUsed,
      efficiency: manager.totalAllocated > 0 ? (manager.totalUsed / manager.totalAllocated * 100).toFixed(1) : 0,
      statistics: stats ? {
        totalAllocations: stats.totalAllocations,
        successfulAllocations: stats.successfulAllocations,
        successRate: (stats.successfulAllocations / stats.totalAllocations * 100).toFixed(1)
      } : null
    };
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è nonce
  setStrategy(chainId, address, strategy) {
    const manager = this.getNonceManager(chainId, address);
    
    if (!this.strategies[strategy]) {
      throw new Error(`Unknown strategy: ${strategy}`);
    }
    
    const oldStrategy = manager.strategy;
    manager.strategy = strategy;
    
    console.log(`üîÑ Nonce strategy changed for ${address} on chain ${chainId}: ${oldStrategy} ‚Üí ${strategy}`);
    
    return this.strategies[strategy];
  }

  // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  cleanupExpiredData() {
    const now = Date.now();
    let cleanedManagers = 0;
    let cleanedCache = 0;
    
    // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
    for (const [key, cached] of this.nonceCache.entries()) {
      const [chainId] = key.split('-');
      const lifetime = this.cacheLifetime[chainId] || this.cacheLifetime.default;
      
      if (now - cached.timestamp > lifetime * 3) { // –£–¥–∞–ª—è–µ–º –∫—ç—à —Å—Ç–∞—Ä—à–µ —Ç—Ä–æ–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
        this.nonceCache.delete(key);
        cleanedCache++;
      }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    for (const [key, manager] of this.nonceManagers.entries()) {
      if (now - manager.lastUpdate > 30 * 60 * 1000) { // 30 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.nonceManagers.delete(key);
        this.usageStats.delete(key);
        cleanedManagers++;
      }
    }
    
    if (cleanedCache > 0 || cleanedManagers > 0) {
      console.log(`üßπ Cleanup completed: ${cleanedCache} cache entries, ${cleanedManagers} inactive managers`);
    }
  }

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
  generateDiagnosticReport() {
    const report = {
      timestamp: new Date().toISOString(),
      managersCount: this.nonceManagers.size,
      cacheSize: this.nonceCache.size,
      strategies: Object.keys(this.strategies),
      managers: {},
      globalStats: {
        totalAllocations: 0,
        totalUsed: 0,
        activeManagers: 0
      }
    };
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
    for (const [key, manager] of this.nonceManagers.entries()) {
      const [chainId, address] = key.split('-');
      const status = this.getNonceStatus(parseInt(chainId), address);
      
      report.managers[key] = status;
      report.globalStats.totalAllocations += manager.totalAllocated;
      report.globalStats.totalUsed += manager.totalUsed;
      
      if (manager.currentNonce !== null) {
        report.globalStats.activeManagers++;
      }
    }
    
    return report;
  }

  // –°–±—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
  resetManager(chainId, address) {
    const key = `${chainId}-${address.toLowerCase()}`;
    
    this.nonceManagers.delete(key);
    this.nonceCache.delete(key);
    this.usageStats.delete(key);
    
    console.log(`üîÑ Reset nonce manager for ${address} on chain ${chainId}`);
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const nonceOptimizationService = new NonceOptimizationService();

export default nonceOptimizationService;