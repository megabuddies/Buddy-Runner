// –°–µ—Ä–≤–∏—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

class GasOptimizationService {
  constructor() {
    // –ö—ç—à –≥–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    this.gasParamsCache = new Map();
    
    // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
    this.cacheLifetime = {
      6342: 2 * 60 * 1000,    // MegaETH - 2 –º–∏–Ω—É—Ç—ã (–±—ã—Å—Ç—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
      31337: 10 * 60 * 1000,  // Foundry - 10 –º–∏–Ω—É—Ç (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å)
      50311: 5 * 60 * 1000,   // Somnia - 5 –º–∏–Ω—É—Ç
      1313161556: 5 * 60 * 1000, // RISE - 5 –º–∏–Ω—É—Ç
      default: 5 * 60 * 1000   // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 5 –º–∏–Ω—É—Ç
    };
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
    this.networkGasConfig = {
      6342: { // MegaETH - —É–ª—å—Ç—Ä–∞-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        maxFeePerGas: '0.001', // 1 mwei –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        maxPriorityFeePerGas: '0.0005', // 0.5 mwei priority
        gasLimit: 100000,
        strategy: 'ultra_fast'
      },
      31337: { // Foundry Local - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        maxFeePerGas: '0.01',
        maxPriorityFeePerGas: '0.001',
        gasLimit: 100000,
        strategy: 'minimal'
      },
      50311: { // Somnia - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        maxFeePerGas: '2',
        maxPriorityFeePerGas: '1',
        gasLimit: 100000,
        strategy: 'balanced'
      },
      1313161556: { // RISE - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        maxFeePerGas: '1',
        maxPriorityFeePerGas: '0.5',
        gasLimit: 100000,
        strategy: 'optimized'
      }
    };
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–∞–∑–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    this.gasUsageStats = new Map();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => this.cleanupExpiredCache(), 30000);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  async getOptimizedGasParams(chainId, publicClient = null) {
    const cacheKey = chainId.toString();
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.gasParamsCache.has(cacheKey)) {
      const cached = this.gasParamsCache.get(cacheKey);
      const lifetime = this.cacheLifetime[chainId] || this.cacheLifetime.default;
      
      if (now - cached.timestamp < lifetime) {
        console.log(`üéØ Using cached gas parameters for chain ${chainId} (age: ${Math.round((now - cached.timestamp) / 1000)}s)`);
        return cached.params;
      }
    }

    console.log(`‚ö° Fetching fresh gas parameters for chain ${chainId}`);
    
    try {
      let gasParams;
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏
      const networkConfig = this.networkGasConfig[chainId];
      
      if (networkConfig) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        gasParams = {
          maxFeePerGas: this.parseGwei(networkConfig.maxFeePerGas),
          maxPriorityFeePerGas: this.parseGwei(networkConfig.maxPriorityFeePerGas),
          gasLimit: networkConfig.gasLimit,
          strategy: networkConfig.strategy,
          timestamp: now
        };
        
        console.log(`üöÄ Using ${networkConfig.strategy} gas strategy for chain ${chainId}`);
        
      } else if (publicClient) {
        // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–µ—Ç–µ–π –ø–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        try {
          const gasPrice = await publicClient.getGasPrice();
          gasParams = {
            maxFeePerGas: gasPrice * 2n, // 2x –¥–ª—è –∑–∞–ø–∞—Å–∞
            maxPriorityFeePerGas: this.parseGwei('1'), // 1 gwei priority
            gasLimit: 100000,
            strategy: 'dynamic',
            timestamp: now
          };
        } catch (error) {
          console.warn('Failed to get dynamic gas price, using fallback:', error);
          // Fallback –∑–Ω–∞—á–µ–Ω–∏—è
          gasParams = {
            maxFeePerGas: this.parseGwei('20'),
            maxPriorityFeePerGas: this.parseGwei('2'),
            gasLimit: 100000,
            strategy: 'fallback',
            timestamp: now
          };
        }
      } else {
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback –±–µ–∑ publicClient
        gasParams = {
          maxFeePerGas: this.parseGwei('20'),
          maxPriorityFeePerGas: this.parseGwei('2'),
          gasLimit: 100000,
          strategy: 'emergency_fallback',
          timestamp: now
        };
      }

      // –ö—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      this.gasParamsCache.set(cacheKey, {
        params: gasParams,
        timestamp: now
      });

      console.log(`üíæ Cached gas params for chain ${chainId}:`, {
        maxFeePerGasGwei: Number(gasParams.maxFeePerGas) / 1e9,
        maxPriorityFeePerGasGwei: Number(gasParams.maxPriorityFeePerGas) / 1e9,
        strategy: gasParams.strategy
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      this.saveToLocalStorage();

      return gasParams;
      
    } catch (error) {
      console.error('Error getting gas params:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏
      if (this.gasParamsCache.has(cacheKey)) {
        console.log('üîÑ Using stale cached gas params due to error');
        return this.gasParamsCache.get(cacheKey).params;
      }
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
      return {
        maxFeePerGas: this.parseGwei('20'),
        maxPriorityFeePerGas: this.parseGwei('2'),
        gasLimit: 100000,
        strategy: 'error_fallback',
        timestamp: now
      };
    }
  }

  // –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–∞–∑–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  recordGasUsage(chainId, actualGasUsed, gasPrice, success, transactionTime) {
    const cacheKey = chainId.toString();
    
    if (!this.gasUsageStats.has(cacheKey)) {
      this.gasUsageStats.set(cacheKey, {
        transactions: [],
        averageGasUsed: 0,
        averageGasPrice: 0,
        successRate: 0,
        averageTime: 0
      });
    }

    const stats = this.gasUsageStats.get(cacheKey);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats.transactions.push({
      gasUsed: actualGasUsed,
      gasPrice,
      success,
      transactionTime,
      timestamp: Date.now()
    });

    // –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (stats.transactions.length > 50) {
      stats.transactions.shift();
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const successfulTxs = stats.transactions.filter(tx => tx.success);
    
    if (successfulTxs.length > 0) {
      stats.averageGasUsed = successfulTxs.reduce((sum, tx) => sum + tx.gasUsed, 0) / successfulTxs.length;
      stats.averageGasPrice = successfulTxs.reduce((sum, tx) => sum + tx.gasPrice, 0) / successfulTxs.length;
      stats.averageTime = successfulTxs.reduce((sum, tx) => sum + tx.transactionTime, 0) / successfulTxs.length;
    }

    stats.successRate = (successfulTxs.length / stats.transactions.length) * 100;

    console.log(`üìä Gas usage stats updated for chain ${chainId}:`, {
      avgGasUsed: Math.round(stats.averageGasUsed),
      avgTime: Math.round(stats.averageTime),
      successRate: Math.round(stats.successRate)
    });
  }

  // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getAdaptiveGasParams(chainId) {
    const cacheKey = chainId.toString();
    const stats = this.gasUsageStats.get(cacheKey);
    const baseConfig = this.networkGasConfig[chainId];

    if (!stats || !baseConfig || stats.transactions.length < 5) {
      // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
      return null;
    }

    const adaptedConfig = { ...baseConfig };

    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (stats.successRate < 90) {
      // –ù–∏–∑–∫–∏–π —É—Å–ø–µ—Ö - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      adaptedConfig.maxFeePerGas = (parseFloat(baseConfig.maxFeePerGas) * 1.5).toString();
      adaptedConfig.maxPriorityFeePerGas = (parseFloat(baseConfig.maxPriorityFeePerGas) * 1.3).toString();
      console.log(`üìà Adaptive increase for chain ${chainId} due to low success rate (${stats.successRate}%)`);
      
    } else if (stats.successRate > 98 && stats.averageTime < 2000) {
      // –í—ã—Å–æ–∫–∏–π —É—Å–ø–µ—Ö –∏ –±—ã—Å—Ç—Ä–æ–µ –≤—Ä–µ–º—è - –º–æ–∂–µ–º —Å–Ω–∏–∑–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      adaptedConfig.maxFeePerGas = (parseFloat(baseConfig.maxFeePerGas) * 0.9).toString();
      adaptedConfig.maxPriorityFeePerGas = (parseFloat(baseConfig.maxPriorityFeePerGas) * 0.9).toString();
      console.log(`üìâ Adaptive decrease for chain ${chainId} due to high performance`);
    }

    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –≥–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if (stats.averageGasUsed > 0) {
      const recommendedGasLimit = Math.ceil(stats.averageGasUsed * 1.2); // 20% –∑–∞–ø–∞—Å
      if (recommendedGasLimit !== baseConfig.gasLimit) {
        adaptedConfig.gasLimit = recommendedGasLimit;
        console.log(`üîß Adaptive gas limit for chain ${chainId}: ${baseConfig.gasLimit} ‚Üí ${recommendedGasLimit}`);
      }
    }

    return adaptedConfig;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ gwei –∑–Ω–∞—á–µ–Ω–∏–π
  parseGwei(gweiString) {
    return BigInt(Math.floor(parseFloat(gweiString) * 1e9));
  }

  // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
  cleanupExpiredCache() {
    const now = Date.now();
    let cleaned = 0;

    for (const [chainId, cached] of this.gasParamsCache.entries()) {
      const lifetime = this.cacheLifetime[chainId] || this.cacheLifetime.default;
      
      if (now - cached.timestamp > lifetime * 2) { // –£–¥–∞–ª—è–µ–º –∫—ç—à —Å—Ç–∞—Ä—à–µ –¥–≤–æ–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
        this.gasParamsCache.delete(chainId);
        cleaned++;
      }
    }

    if (cleaned > 0) {
      console.log(`üßπ Cleaned ${cleaned} expired gas cache entries`);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –≤ localStorage
  saveToLocalStorage() {
    try {
      const cacheData = {};
      
      for (const [chainId, cached] of this.gasParamsCache.entries()) {
        cacheData[chainId] = {
          params: {
            maxFeePerGas: cached.params.maxFeePerGas.toString(),
            maxPriorityFeePerGas: cached.params.maxPriorityFeePerGas.toString(),
            gasLimit: cached.params.gasLimit,
            strategy: cached.params.strategy
          },
          timestamp: cached.timestamp
        };
      }
      
      localStorage.setItem('gasOptimization_cache', JSON.stringify(cacheData));
    } catch (error) {
      console.warn('Failed to save gas cache to localStorage:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏–∑ localStorage
  loadFromLocalStorage() {
    try {
      const cached = localStorage.getItem('gasOptimization_cache');
      if (cached) {
        const cacheData = JSON.parse(cached);
        const now = Date.now();
        
        for (const [chainId, data] of Object.entries(cacheData)) {
          const lifetime = this.cacheLifetime[chainId] || this.cacheLifetime.default;
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
          if (now - data.timestamp < lifetime) {
            this.gasParamsCache.set(chainId, {
              params: {
                maxFeePerGas: BigInt(data.params.maxFeePerGas),
                maxPriorityFeePerGas: BigInt(data.params.maxPriorityFeePerGas),
                gasLimit: data.params.gasLimit,
                strategy: data.params.strategy,
                timestamp: data.timestamp
              },
              timestamp: data.timestamp
            });
          }
        }
        
        console.log(`üíæ Loaded gas cache from localStorage: ${this.gasParamsCache.size} entries`);
      }
    } catch (error) {
      console.warn('Failed to load gas cache from localStorage:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  getPerformanceStats(chainId) {
    const cacheKey = chainId.toString();
    const stats = this.gasUsageStats.get(cacheKey);
    
    if (!stats || stats.transactions.length === 0) {
      return {
        totalTransactions: 0,
        successRate: 0,
        averageGasUsed: 0,
        averageTime: 0,
        cacheHitRate: 0
      };
    }

    return {
      totalTransactions: stats.transactions.length,
      successRate: Math.round(stats.successRate * 10) / 10,
      averageGasUsed: Math.round(stats.averageGasUsed),
      averageTime: Math.round(stats.averageTime),
      cacheHitRate: this.calculateCacheHitRate(chainId)
    };
  }

  // –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à
  calculateCacheHitRate(chainId) {
    // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è/–ø—Ä–æ–º–∞—Ö–∏
    const cached = this.gasParamsCache.get(chainId.toString());
    return cached ? 85 : 0; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
  }

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
  generateDiagnosticReport() {
    const report = {
      timestamp: new Date().toISOString(),
      cacheStatus: {
        totalEntries: this.gasParamsCache.size,
        networks: Array.from(this.gasParamsCache.keys())
      },
      statistics: {},
      configurations: this.networkGasConfig
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
    for (const [chainId, stats] of this.gasUsageStats.entries()) {
      report.statistics[chainId] = this.getPerformanceStats(parseInt(chainId));
    }

    return report;
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const gasOptimizationService = new GasOptimizationService();

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
gasOptimizationService.loadFromLocalStorage();

export default gasOptimizationService;