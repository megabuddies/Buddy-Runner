import { createWalletClient, createPublicClient, http, custom, publicActions } from 'viem';
import { mainnet, sepolia, baseSepolia } from 'viem/chains';
import { encodeFunctionData } from 'viem';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞—à–∏—Ö –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
const NETWORK_CONFIG = {
  'local': {
    id: 31337,
    name: 'Local Hardhat',
    rpcUrl: 'http://127.0.0.1:8545',
    contracts: {
      updater: '0xb34cac1135c27ec810e7e6880325085783c1a7e0', // –í–∞—à –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω—ã–π Updater
      faucet: '0x76b71a17d82232fd29aca475d14ed596c67c4b85'   // –í–∞—à –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω—ã–π Faucet
    },
    blockTime: 2000, // ms
    gasLimit: 100000n,
    sendMethod: 'eth_sendRawTransaction'
  },
  'megaeth': {
    id: 6342,
    name: 'MegaETH Testnet',
    rpcUrl: 'https://megaeth-testnet.rpc.caldera.xyz/http',
    contracts: {
      updater: '0xb34cac1135c27ec810e7e6880325085783c1a7e0', // –û–±–Ω–æ–≤–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è MegaETH
      faucet: '0x76b71a17d82232fd29aca475d14ed596c67c4b85'
    },
    blockTime: 100, // ms - —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–µ –±–ª–æ–∫–∏
    gasLimit: 100000n,
    sendMethod: 'realtime_sendRawTransaction' // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ MegaETH
  },
  'base': {
    id: 84532,
    name: 'Base Sepolia',
    rpcUrl: 'https://sepolia.base.org',
    contracts: {
      updater: '0xb34cac1135c27ec810e7e6880325085783c1a7e0', // –û–±–Ω–æ–≤–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è Base
      faucet: '0x76b71a17d82232fd29aca475d14ed596c67c4b85'
    },
    blockTime: 2000, // ms
    gasLimit: 100000n,
    sendMethod: 'eth_sendRawTransaction'
  }
};

// ABI –¥–ª—è Updater –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
const UPDATER_ABI = [
  {
    name: 'update',
    type: 'function',
    stateMutability: 'nonpayable',
    inputs: [],
    outputs: []
  },
  {
    name: 'number',
    type: 'function',
    stateMutability: 'view',
    inputs: [],
    outputs: [{ name: '', type: 'uint256' }]
  }
];

class OptimizedBlockchainService {
  constructor() {
    // –ö–µ—à–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.clientCache = {};
    this.gasParams = {};
    this.preSignedPool = {};
    
    // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.metrics = {
      totalTransactions: 0,
      averageTime: 0,
      networkStats: {}
    };
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    this.isInitialized = false;
    this.currentWallet = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ–º –ø–∞–∫–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  async initializeOptimized(privyWallet, chainKey = 'local', batchSize = 20) {
    try {
      console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è ${chainKey}...`);
      
      const startTime = performance.now();
      this.currentWallet = privyWallet;
      
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—É—é —Å–µ—Ç—å
      await this.switchToChain(chainKey);
      
      // –°–æ–∑–¥–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
      await this.createCachedClient(chainKey);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏ –∫–µ—à–∏—Ä—É–µ–º –≥–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      await this.cacheGasParams(chainKey);
      
      // –ü—Ä–µ–¥–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      await this.preSignBatch(chainKey, batchSize);
      
      this.isInitialized = true;
      
      const initTime = performance.now() - startTime;
      console.log(`‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${initTime.toFixed(2)}ms`);
      console.log(`üì¶ –ü—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–æ ${batchSize} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏`);
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å–µ—Ç—å
   */
  async switchToChain(chainKey) {
    const config = NETWORK_CONFIG[chainKey];
    if (!config) {
      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å: ${chainKey}`);
    }

    try {
      const provider = await this.currentWallet.getEthersProvider();
      const currentNetwork = await provider.getNetwork();
      
      if (currentNetwork.chainId !== config.id) {
        console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ç—å ${config.name}...`);
        
        await window.ethereum.request({
          method: 'wallet_switchEthereumChain',
          params: [{ chainId: `0x${config.id.toString(16)}` }],
        });
        
        // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–µ—Ç—å —á–µ—Ä–µ–∑ wallet_switchEthereumChain:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±–ª–æ–∫—á–µ–π–Ω–∞
   */
  async createCachedClient(chainKey) {
    if (this.clientCache[chainKey]) {
      return this.clientCache[chainKey];
    }

    const config = NETWORK_CONFIG[chainKey];
    const provider = await this.currentWallet.getEthersProvider();

    // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    const client = createWalletClient({
      transport: custom(provider),
    }).extend(publicActions);

    // –ö–µ—à–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    this.clientCache[chainKey] = client;
    
    console.log(`üîß –°–æ–∑–¥–∞–Ω –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω –∫–ª–∏–µ–Ω—Ç –¥–ª—è ${config.name}`);
    return client;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   */
  async cacheGasParams(chainKey) {
    if (this.gasParams[chainKey]) {
      return this.gasParams[chainKey];
    }

    const client = this.clientCache[chainKey];
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≥–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const gasPrice = await client.getGasPrice();
      
      // –î–ª—è EIP-1559 —Å–µ—Ç–µ–π
      const gas = {
        maxFeePerGas: gasPrice * 120n / 100n, // +20% –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        maxPriorityFeePerGas: gasPrice * 10n / 100n, // 10% tip
        gasPrice: gasPrice
      };

      this.gasParams[chainKey] = gas;
      console.log(`‚õΩ –ö–µ—à–∏—Ä–æ–≤–∞–Ω –≥–∞–∑ –¥–ª—è ${chainKey}: ${gas.maxFeePerGas.toString()}`);
      
      return gas;
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      
      // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const defaultGas = {
        maxFeePerGas: 20000000000n, // 20 gwei
        maxPriorityFeePerGas: 1000000000n, // 1 gwei
        gasPrice: 20000000000n
      };
      
      this.gasParams[chainKey] = defaultGas;
      return defaultGas;
    }
  }

  /**
   * –ü—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  async preSignBatch(chainKey, batchSize) {
    const client = this.clientCache[chainKey];
    const config = NETWORK_CONFIG[chainKey];
    const gas = this.gasParams[chainKey];

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π nonce
      const account = await client.getAddresses();
      const address = account[0];
      const nonce = await client.getTransactionCount({
        address: address,
        blockTag: 'pending'
      });

      console.log(`üìù –ü—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ ${batchSize} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –Ω–∞—á–∏–Ω–∞—è —Å nonce ${nonce}...`);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ update()
      const updateData = encodeFunctionData({
        abi: UPDATER_ABI,
        functionName: 'update',
        args: []
      });

      const signedTransactions = [];

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      for (let i = 0; i < batchSize; i++) {
        const txData = {
          account: address,
          to: config.contracts.updater,
          data: updateData,
          nonce: nonce + i,
          maxFeePerGas: gas.maxFeePerGas,
          maxPriorityFeePerGas: gas.maxPriorityFeePerGas,
          value: 0n,
          type: 'eip1559',
          gas: config.gasLimit,
        };

        const signedTx = await client.signTransaction(txData);
        signedTransactions.push(signedTx);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—É–ª
      this.preSignedPool[chainKey] = {
        transactions: signedTransactions,
        currentIndex: 0,
        baseNonce: nonce,
        hasTriggeredRefill: false
      };

      console.log(`‚úÖ –ü—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–æ ${batchSize} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${chainKey}`);
      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –ø—É–ª–∞
   */
  getNextTransaction(chainKey) {
    const pool = this.preSignedPool[chainKey];
    
    if (!pool || pool.currentIndex >= pool.transactions.length) {
      throw new Error(`–ü—É–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${chainKey} –ø—É—Å—Ç –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω`);
    }

    const transaction = pool.transactions[pool.currentIndex];
    pool.currentIndex++;

    // –ê–≤—Ç–æ–¥–æ–∑–∞–ø—Ä–∞–≤–∫–∞ –ø—É–ª–∞ –ø—Ä–∏ 50% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    if (pool.currentIndex >= pool.transactions.length / 2 && !pool.hasTriggeredRefill) {
      pool.hasTriggeredRefill = true;
      console.log(`üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏ –ø—É–ª–∞ –¥–ª—è ${chainKey}...`);
      
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–∑–∞–ø—Ä–∞–≤–ª—è–µ–º –ø—É–ª
      this.extendPool(chainKey, pool.baseNonce + pool.transactions.length, 10)
        .then(() => {
          console.log(`‚úÖ –ü—É–ª ${chainKey} —É—Å–ø–µ—à–Ω–æ –¥–æ–∑–∞–ø—Ä–∞–≤–ª–µ–Ω`);
          pool.hasTriggeredRefill = false;
        })
        .catch(error => {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏ –ø—É–ª–∞ ${chainKey}:`, error);
          pool.hasTriggeredRefill = false;
        });
    }

    return transaction;
  }

  /**
   * –î–æ–∑–∞–ø—Ä–∞–≤–∫–∞ –ø—É–ª–∞ –Ω–æ–≤—ã–º–∏ –ø—Ä–µ–¥–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
   */
  async extendPool(chainKey, startNonce, batchSize) {
    const client = this.clientCache[chainKey];
    const config = NETWORK_CONFIG[chainKey];
    const gas = this.gasParams[chainKey];

    try {
      const account = await client.getAddresses();
      const address = account[0];

      const updateData = encodeFunctionData({
        abi: UPDATER_ABI,
        functionName: 'update',
        args: []
      });

      const newTransactions = [];

      for (let i = 0; i < batchSize; i++) {
        const txData = {
          account: address,
          to: config.contracts.updater,
          data: updateData,
          nonce: startNonce + i,
          maxFeePerGas: gas.maxFeePerGas,
          maxPriorityFeePerGas: gas.maxPriorityFeePerGas,
          value: 0n,
          type: 'eip1559',
          gas: config.gasLimit,
        };

        const signedTx = await client.signTransaction(txData);
        newTransactions.push(signedTx);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É–ª
      this.preSignedPool[chainKey].transactions.push(...newTransactions);
      
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏ –ø—É–ª–∞:', error);
      throw error;
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω
   */
  async sendPlayerAction(chainKey) {
    if (!this.isInitialized) {
      throw new Error('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ initializeOptimized() —Å–Ω–∞—á–∞–ª–∞.');
    }

    const startTime = performance.now();
    
    try {
      let result;
      
      // –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞
      switch (chainKey) {
        case 'megaeth':
          result = await this.sendMegaethTransaction(startTime);
          break;
        case 'base':
          result = await this.sendBaseTransaction(startTime);
          break;
        default:
          result = await this.sendRegularTransaction(chainKey, startTime);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
      this.updateMetrics(chainKey, result);
      
      return result;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è ${chainKey}:`, error);
      throw error;
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è MegaETH (—Ä–µ–∞–ª—Ç–∞–π–º)
   */
  async sendMegaethTransaction(startTime) {
    const client = this.clientCache['megaeth'];
    const signedTx = this.getNextTransaction('megaeth');

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∞–ª—Ç–∞–π–º –º–µ—Ç–æ–¥ MegaETH
      const result = await client.request({
        method: 'realtime_sendRawTransaction',
        params: [signedTx]
      });

      const executionTime = performance.now() - startTime;
      console.log(`‚ö° MegaETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞ ${executionTime.toFixed(2)}ms`);
      
      return executionTime;
    } catch (error) {
      // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
      console.warn('Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è MegaETH');
      return await this.sendRegularTransaction('megaeth', startTime);
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è Base
   */
  async sendBaseTransaction(startTime) {
    const client = this.clientCache['base'];
    const signedTx = this.getNextTransaction('base');

    const hash = await client.sendRawTransaction({ 
      serializedTransaction: signedTx 
    });

    const executionTime = performance.now() - startTime;
    console.log(`üîµ Base —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞ ${executionTime.toFixed(2)}ms, hash: ${hash}`);
    
    return executionTime;
  }

  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
   */
  async sendRegularTransaction(chainKey, startTime) {
    const client = this.clientCache[chainKey];
    const signedTx = this.getNextTransaction(chainKey);

    const hash = await client.sendRawTransaction({ 
      serializedTransaction: signedTx 
    });

    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –∂–¥–µ–º receipt –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if (chainKey === 'local') {
      const receipt = await client.waitForTransactionReceipt({ hash });
      console.log(`üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–µ ${receipt.blockNumber}`);
    }

    const executionTime = performance.now() - startTime;
    console.log(`üîó ${chainKey} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞ ${executionTime.toFixed(2)}ms, hash: ${hash}`);
    
    return executionTime;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  updateMetrics(chainKey, executionTime) {
    this.metrics.totalTransactions++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
    this.metrics.averageTime = (
      (this.metrics.averageTime * (this.metrics.totalTransactions - 1) + executionTime) / 
      this.metrics.totalTransactions
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Ç—è–º
    if (!this.metrics.networkStats[chainKey]) {
      this.metrics.networkStats[chainKey] = {
        count: 0,
        averageTime: 0,
        minTime: Infinity,
        maxTime: 0
      };
    }

    const stats = this.metrics.networkStats[chainKey];
    stats.count++;
    stats.averageTime = (
      (stats.averageTime * (stats.count - 1) + executionTime) / stats.count
    );
    stats.minTime = Math.min(stats.minTime, executionTime);
    stats.maxTime = Math.max(stats.maxTime, executionTime);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
   */
  async getCurrentNumber(chainKey) {
    const client = this.clientCache[chainKey];
    const config = NETWORK_CONFIG[chainKey];

    try {
      const result = await client.readContract({
        address: config.contracts.updater,
        abi: UPDATER_ABI,
        functionName: 'number'
      });

      return Number(result);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  getPerformanceStats() {
    return {
      ...this.metrics,
      poolStatus: Object.keys(this.preSignedPool).reduce((acc, key) => {
        const pool = this.preSignedPool[key];
        acc[key] = {
          total: pool.transactions.length,
          used: pool.currentIndex,
          remaining: pool.transactions.length - pool.currentIndex
        };
        return acc;
      }, {})
    };
  }

  /**
   * –°–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã –∏ –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π
   */
  reset() {
    this.clientCache = {};
    this.gasParams = {};
    this.preSignedPool = {};
    this.metrics = {
      totalTransactions: 0,
      averageTime: 0,
      networkStats: {}
    };
    this.isInitialized = false;
    this.currentWallet = null;
    
    console.log('üîÑ –°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const optimizedBlockchainService = new OptimizedBlockchainService();
export default optimizedBlockchainService;