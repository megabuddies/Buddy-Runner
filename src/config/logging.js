// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const LOG_LEVELS = {
  ERROR: 0,
  WARN: 1,
  INFO: 2,
  DEBUG: 3,
  VERBOSE: 4
};

// –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ localStorage –∏–ª–∏ env)
const getLogLevel = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  const storedLevel = localStorage.getItem('logLevel');
  if (storedLevel !== null) {
    return parseInt(storedLevel);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º env –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  const envLevel = import.meta.env.VITE_LOG_LEVEL;
  if (envLevel) {
    return parseInt(envLevel);
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  return LOG_LEVELS.WARN;
};

// –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
export const logger = {
  error: (message, ...args) => {
    if (getLogLevel() >= LOG_LEVELS.ERROR) {
      console.error(`‚ùå ${message}`, ...args);
    }
  },
  
  warn: (message, ...args) => {
    if (getLogLevel() >= LOG_LEVELS.WARN) {
      console.warn(`‚ö†Ô∏è ${message}`, ...args);
    }
  },
  
  info: (message, ...args) => {
    if (getLogLevel() >= LOG_LEVELS.INFO) {
      console.log(`‚ÑπÔ∏è ${message}`, ...args);
    }
  },
  
  debug: (message, ...args) => {
    if (getLogLevel() >= LOG_LEVELS.DEBUG) {
      console.log(`üîç ${message}`, ...args);
    }
  },
  
  verbose: (message, ...args) => {
    if (getLogLevel() >= LOG_LEVELS.VERBOSE) {
      console.log(`üìù ${message}`, ...args);
    }
  },
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è)
  critical: (message, ...args) => {
    console.error(`üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${message}`, ...args);
  },
  
  success: (message, ...args) => {
    console.log(`‚úÖ ${message}`, ...args);
  },
  
  game: (message, ...args) => {
    console.log(`üéÆ ${message}`, ...args);
  },
  
  blockchain: (message, ...args) => {
    console.log(`‚õìÔ∏è ${message}`, ...args);
  },
  
  wallet: (message, ...args) => {
    console.log(`üí∞ ${message}`, ...args);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
export const setLogLevel = (level) => {
  localStorage.setItem('logLevel', level.toString());
  logger.info(`–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${Object.keys(LOG_LEVELS)[level]}`);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
export const getCurrentLogLevel = () => {
  return getLogLevel();
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { LOG_LEVELS };