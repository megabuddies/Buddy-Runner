// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã faucet –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
// –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã

console.log('üß™ Starting faucet and balance test...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è faucet
async function testFaucet() {
  try {
    console.log('üí∞ Testing faucet functionality...');
    
    // –ü–æ–ª—É—á–∞–µ–º embedded wallet
    const embeddedWallet = window.gameGetEmbeddedWallet?.();
    if (!embeddedWallet) {
      console.error('‚ùå No embedded wallet found');
      return;
    }
    
    console.log('‚úÖ Found embedded wallet:', embeddedWallet.address);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    console.log('üìä Checking current balance...');
    const currentBalance = await window.gameForceRefreshBalance?.(6342);
    console.log('üí∞ Current balance:', currentBalance);
    
    // –í—ã–∑—ã–≤–∞–µ–º faucet
    console.log('üö∞ Calling faucet...');
    const faucetResult = await window.gameCallFaucet?.(embeddedWallet.address, 6342);
    console.log('‚úÖ Faucet result:', faucetResult);
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–Ω–æ–≤–∞
    console.log('‚è≥ Waiting for balance update...');
    setTimeout(async () => {
      try {
        const newBalance = await window.gameForceRefreshBalance?.(6342);
        console.log('üí∞ New balance after faucet:', newBalance);
        
        if (newBalance > currentBalance) {
          console.log('‚úÖ SUCCESS: Balance increased after faucet!');
        } else {
          console.log('‚ö†Ô∏è Balance did not increase, may need more time...');
        }
      } catch (error) {
        console.error('‚ùå Failed to check new balance:', error);
      }
    }, 3000);
    
  } catch (error) {
    console.error('‚ùå Faucet test failed:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async function testBalanceRefresh() {
  try {
    console.log('üîÑ Testing balance refresh functionality...');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    const result = await window.refetchBalance?.(6342);
    console.log('‚úÖ Balance refresh result:', result);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const poolStatus = window.blockchainDebug?.getTransactionPool(6342);
    console.log('üìä Transaction pool status:', poolStatus);
    
  } catch (error) {
    console.error('‚ùå Balance refresh test failed:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runFullTest() {
  console.log('üöÄ Starting full faucet and balance test...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π
  if (!window.gameCallFaucet || !window.gameGetEmbeddedWallet || !window.refetchBalance) {
    console.error('‚ùå Required functions not available. Make sure you are on the game page and blockchain is initialized.');
    return;
  }
  
  console.log('‚úÖ All required functions are available');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  await testBalanceRefresh();
  await testFaucet();
  
  console.log('üéØ Full test completed!');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.testFaucet = testFaucet;
window.testBalanceRefresh = testBalanceRefresh;
window.runFullTest = runFullTest;

console.log('üß™ Test functions loaded:');
console.log('  ‚Ä¢ window.testFaucet() - Test faucet functionality');
console.log('  ‚Ä¢ window.testBalanceRefresh() - Test balance refresh');
console.log('  ‚Ä¢ window.runFullTest() - Run complete test suite');
console.log('');
console.log('üí° Run window.runFullTest() to start testing...');